---
title: Quick Base Developers

language_tabs: # must be one of https://git.io/vQNgJ
  - javascript--node
  - javascript--browser
  - php

toc_footers:
  - <a href='https://www.quickbase.com/' target='_blank'>Quick Base</a> | <a href='https://help.quickbase.com/api-guide/' target='_blank'>Quick Base API</a>
  - <a href='https://github.com/lord/slate' target='_blank'>Documentation Powered by Slate</a>
  - Developed by <a href='https://github.com/tflanagan' target='_blank'>Tristian Flanagan</a> | <a href='https://github.com/tflanagan/quickbase.dev' target='_blank'>GitHub</a>

includes:
  - errors

search: true
---

# Introduction

Welcome to quickbase.dev! This site is dedicated to providing information and help on how to navigate Quick Base's API.

The featured libraries are all designed to be flexible, portable, easy, and fun to use. We have examples in PHP and JavaScript! You can view code examples in the dark area to the right, and you can switch the programming language of the examples with the tabs in the top right.

All the featured libraries are hosted on GitHub and are open and welcome to submissions.

Additionally, all the featured libraries are available for use under their respective <a href='http://www.apache.org/licenses/LICENSE-2.0' target='_blank'>Apache-2.0 licenses</a> found in each respective repository.

We are continually trying to improve the information available! Please feel free to submit an issue or a pull request to help us improve!

## Support

The featured libraries are open-source projects open and welcome to all submissions.

Please keep all support requests to their respective GitHub repositories. For example, for a PHP issue please do not open an issue in the node repository, open it in the PHP repository.

## FAQ

### How do I debug?

```javascript--node
// Windows
$ SET DEBUG=* && node path/to/script.js

// Unix
$ DEBUG=* node path/to/script.js
```

```javascript--browser
window.localStorage.debug = '*';
window.location.reload(); // You have to refresh for the changes to take hold
```

```php
<?php

$quickbase = new \QuickBase\QuickBase(array( ... ));

$quickbase->debug = true;

?>
```

In JavaScript, the libraries make good use of the `debug` library.

If you are in the browser, to engage the debug functionality, open your developer tools console and enter `window.localStorage.debug = '*';`. Then refresh the page. Any API calls will now be logged directly to the console so you know exactly what is being sent to Quick Base and what is being sent back.

If you are use Nodejs, you'll have to set the DEBUG environment variable, for Windows `SET DEBUG=*`, for unix based systems `DEBUG=*`. Any API calls will now be logged directly to stdout so you know exactly what is being sent to Quick Base and what is being sent back.

In PHP, the library has a very rudamentary system. If you set the `QuickBase` instance public property `debug` to `true`, then the library will `var_dump` all outgoing requests, but not incoming responses. You can accomplish the same feat by `var_dump`'ing the result of your `api()` method call.

# Requirements

Below are the requirements for various platforms.

Also, while not a requirement, if you are working on a Windows machine, I highly recommend using `cmder` to interact with Nodejs or PHP via the command line.

You can find `cmder` here: <a href='https://cmder.net/' target='_blank'>https://cmder.net/</a>

## Browser

The libraries detailed in this document are transpiled to and made available in ECMAScript2015 ("ES 5"), thus any browser that supports ES 5 or greater, supports these libraries.

You can find out what browsers support ES 5 here: <a href='https://kangax.github.io/compat-table/es5/' target='_blank'>https://kangax.github.io/compat-table/es5/</a>

<i>(Hint: All modern browsers support ES 5.)</i>

## Server

### Nodejs

Version 4.0.0 or greater

To install Nodejs, please visit their website here: <a href='https://nodejs.org/en/' target='_blank'>https://nodejs.org/en/</a>

You will also require `npm`, which is Nodejs's package manager. Depending on how you install Nodejs, `npm` is most likely included. If it wasn't, you can find help here: <a href='https://www.npmjs.com/get-npm' target='_blank'>https://www.npmjs.com/get-npm</a>

### PHP

Version 5.4.0 or greater

PHP extensions CURL and XML are also required

To install PHP, please find help here: <a href='https://secure.php.net/manual/en/install.php' target='_blank'>https://secure.php.net/manual/en/install.php</a>

You will also require `composer`, which is a PHP package manager. To install `composer`, please visit here: <a href='https://getcomposer.org/download/' target='_blank'>https://getcomposer.org/download/</a>

# QuickBase

This is the low level Quick Base class, giving you direct access to Quick Base's API.

This class is utilized in the abstraction layers QBRecord and QBTable.

## Repository Links

* PHP: <a href='https://github.com/tflanagan/php-quickbase' target='_blank'>https://github.com/tflanagan/php-quickbase</a>
* JavaScript: <a href='https://github.com/tflanagan/node-quickbase' target='_blank'>https://github.com/tflanagan/node-quickbase</a>

## Installation & Loading

```javascript--node
// $ npm install --save quickbase

const QuickBase = require('quickbase');
```

```javascript--browser
// <script type="text/javascript" src="quickbase.browserify.min.js"></script>
```

```php
<?php

// $ composer require tflanagan/quickbase

require_once(__DIR__.DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php');

?>
```

Installing the Quick Base library for your desired platform requires either including the browserified version of the library in your HTML page or installing it via a package manager (npm or composer).

Including the library for use in your code depends on your platform.

## Initialization

```javascript--node
const quickbase = new QuickBase({
  realm: 'subdomain/realm',
  userToken: 'user token',
  appToken: 'application token',
  flags: {
    msInUTC: true,
    encoding: 'ISO-8859-1'
  },
  connectionLimit: 10,
  errorOnConnectionLimit: false
});
```

```javascript--browser
var quickbase = new QuickBase({
  realm: 'subdomain/realm',
  userToken: 'user token',
  appToken: 'application token',
  flags: {
    msInUTC: true,
    encoding: 'ISO-8859-1'
  },
  connectionLimit: 10,
  errorOnConnectionLimit: false
});
```

```php
<?php

$quickbase = new \QuickBase\QuickBase(array(
  'realm' => 'subdomain/realm',
  'userToken' => 'user token',
  'appToken' => 'application token',
  'flags' => array(
    'msInUTC' => true,
    'encoding' => 'ISO-8859-1'
  )
));

?>
```

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
realm | true | | Quick Base Realm (or subdomain)
appToken | false | | Quick Base Application Token
userToken | false | | Quick Base User Token
flags | false | | Object containing a collection of API parameters
  - msInUTC | false | true | Interpret all timestamps as milliseconds in UTC rather than using the local application time
  - encoding | false | ISO-8859-1 | The encoding used to make requests to and parse responses from Quick Base
connectionLimit | true | 10 | <i>(JavaScript Only)</i> Maximum number of simultaneous API requests
errorOnConnectionLimit | false | false | <i>(JavaScript Only)</i> Throw an error if the connectionLimit is exceeded

## Making an API Call

The Quick Base librarys are built in such a way as to be as future-proof as possible. 9/10 times, a new API endpoint will automatically be supported if you're using these libraries.

The way we accomplish this is by exposing a single method `api()`.

### `.api(action[, options])`

```javascript--node
quickbase.api('SomeAPI_Action', {
  dbid: 'bddnn3uz9',
  someFutureProperty: 'lorem ipsum'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('SomeAPI_Action', {
  dbid: 'bddnn3uz9',
  someFutureProperty: 'lorem ipsum'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('SomeAPI_Action', array(
    'dbid' => 'bddnn3uz9',
    'someFutureProperty' => 'lorem ipsum'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
action | true | | The Quick Base API Action you wish to execute (ie: API_DoQuery)
options | false | | An object containing data pertaining to your API Action

In JavaScript, the `api()` method returns a Promise, powered by <a href='http://bluebirdjs.com/docs/getting-started.html' target='_blank'>bluebirdjs</a>. If an error occurs during the request, you can handle the error by using `catch()`. Otherwise, you can continue processing with the results passed into a `then()`.

In PHP, the `api()` method returns the resulting JSON object from the API call. If an error occurs, it will be thrown and needs to be caught with a `try/catch` statement.

<aside class="notice">
<i>(JavaScript Only)</i><br />
This library makes API calls asychronously. As Quick Base cannot support n number of requests at a given time, the default limit is 10. This throttles the requests sent to Quick Base in order to preserve the Quick Base applications integrity and performance.<br />
<br />
If your application experiences a normal traffic rate that is higher than average, you may want to consider reducing the `connectionLimit` setting.
</aside>

## Quick Base API Endpoints

The following is a list of Quick Base API Endpoints mostly compiled from Quick Base's own help section.

Each endpoint has an overview of the endpoint and what it supports, an example of using it in code, what the response from Quick Base looks like in JSON, and a link to Quick Base's help section for that specific endpoint.

This list may not contain everything that is supported. As these libraries are future-proof, if Quick Base comes out with a new endpoint, it will be automatically supported - so long as Quick Base hasn't changed too much. We will try to keep this update to date, time allowing. To that note, Quick Base's documentation is the ultimate authority in regards to what is supported.

### API_AddField

```javascript--node
quickbase.api('API_AddField', {
  dbid: 'bddnn3uz9',
  add_to_forms: true,
  label: 'Label',
  mode: 'virtual',
  type: 'formula'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_AddField', {
  dbid: 'bddnn3uz9',
  add_to_forms: true,
  label: 'Label',
  mode: 'virtual',
  type: 'formula'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_AddField', array(
    'dbid' => 'bddnn3uz9',
    'add_to_forms' => true,
    'label' => 'Label',
    'mode' => 'virtual',
    'type' => 'formula'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_AddField",
  "errcode": 0,
  "errtext": "No error",
  "fid": 8,
  "label": "Label"
}
```

<a href='https://help.quickbase.com/api-guide/add_field.html' target='_blank'>Quick Base Documentation</a>

Use API_AddField to add a new field to a table. You invoke this call on a table-level dbid.

When you add a field using API_AddField, you specify the field type, but no other field properties. After you've added the field, you can use API_SetFieldProperties to set the properties of the new field and any default values. (You can't set field type using API_SetFieldProperties; if you want to change the field type after adding the field, you must use the Quick Base UI.)

The amount of data space consumed by a field depends on the field type.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID that you want to add a field to
add_to_forms | false | false | Specifies whether the field you are adding should appear at the end of any form with form properties set to "Auto-Add new fields."
label | true | | Name of the new field
mode | Lookup/Formula only | | Specifies whether the field is a formula field or a lookup field (possible values for formula: 'virtual', and lookup: 'lookup')
type | true | | The Quick Base field type.

Possible `type` values:

UI: TYPE | API: TYPE
-------- | ---------
Checkbox | checkbox
Date | date
Duration | duration
Email Address | email
File Attachment | file
Formula | any other type
Lookup | text or float
List - User | multiuserid
Multi-Select Text | multitext
Numeric | float
Numeric - Currency | currency
Numeric - Percent | percent
Numeric - Rating | rating
Phone Number | phone
Report  Link | dblink
Text | text
Time Of Day | timeofday
URL | url
User | userid

### API_AddGroupToRole

```javascript--node
quickbase.api('API_AddField', {
  dbid: 'bddnn3uz9',
  gid: '345889.ksld',
  roleid: 12
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_AddField', {
  dbid: 'bddnn3uz9',
  gid: '345889.ksld',
  roleid: 12
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php
try {
  $results = $quickbase->api('API_AddField', array(
    'dbid' => 'bddnn3uz9',
    'gid' => '345889.ksld',
    'roleid' => 12
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_AddGroupToRole",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-node/api_addgrouptorole.html' target='_blank'>Quick Base Documentation</a>

Use API_AddGroupToRole to add a group to a role in an app.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
gid | true | | The id of the group
roleid | true | | The id of the role

### API_AddRecord

```javascript--node
quickbase.api('API_AddRecord', {
  dbid: 'bddnn3uz9',
  fields: [
    { fid: 6, value: 'Hello World!' }
  ],
  disprec: false,
  fform: false,
  ignoreError: false,
  msInUTC: false,
  msAsDurationDefault: false
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_AddRecord', {
  dbid: 'bddnn3uz9',
  fields: [
    { fid: 6, value: 'Hello World!' }
  ],
  disprec: false,
  fform: false,
  ignoreError: false,
  msInUTC: false,
  msAsDurationDefault: false
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_AddRecord', array(
    'dbid' => 'bddnn3uz9',
    'fields' => array(
      array( 'fid' => 6, 'value' => 'Hello World!' )
    ),
    'disprec' => false,
    'fform' => false,
    'ignoreError' => false,
    'msInUTC' => false,
    'msAsDurationDefault' => false
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_AddRecord",
  "errcode": 0,
  "errtext": "No error",
  "rid": 21,
  "update_id": 1206177014451
}
```

<a href='https://help.quickbase.com/api-guide/add_record.html' target='_blank'>Quick Base Documentation</a>

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
fields | true | | Array of objects with fid/value parameters
disprec | false | false | Set this parameter to true to specify that the new record should be displayed within the Quick Base application. An application login required before the record can be displayed. If you use this parameter, Quick Base, returns the normal Quick Base HTML page that displays the record.<br /><br />Omit this property if you don't want the new record to display within the Quick Base application.
fform | false | false | Set this parameter to true if you are invoking API_AddRecord from within an HTML form that has checkboxes and want those checkboxes to set Quick Base Checkbox fields.<br /><br />Omit this property if you don't need Quick Base to set Checkbox fields based on your HTML page.
ignoreError | false | false | Set this parameter to true to specify that no error should be returned when a built-in field (for example, Record ID#) is written-to in an API_AddRecord call.<br /><br />If you do not set this parameter, Quick Base returns an error when API_AddRecord writes to a built-in field.
msInUTC | false | global instance setting | Allows you to specify that Quick Base should interpret all date/time stamps passed in as milliseconds using Coordinated Universal Time (UTC) rather than using the local application time.<br /><br />Set this parameter to true if you want to use Coordinated Universal Time.
msAsDurationDefault | false | false | Set this parameter to true to specify milliseconds, instead of days, as the default units for a duration field value sent without any units.<br /><br />If you set this parameter to false or omit it, then any duration field values sent without a unit will default to being interpreted as days.

### API_AddReplaceDBPage

```javascript--node
// Adding a new DB Page
quickbase.api('API_AddReplaceDBPage', {
  dbid: 'bddnn3uz9',
  pagename: 'newpage.html',
  pagetype: 1,
  pagebody: '<html></html>'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});

// Updating an existing DB Page
quickbase.api('API_AddReplaceDBPage', {
  dbid: 'bddnn3uz9',
  pagename: 'newpage.html',
  pageid: 12,
  pagetype: 1,
  pagebody: '<html></html>'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
// Adding a new DB Page
quickbase.api('API_AddReplaceDBPage', {
  dbid: 'bddnn3uz9',
  pagename: 'newpage.html',
  pagetype: 1,
  pagebody: '<html></html>'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});

// Updating an existing DB Page
quickbase.api('API_AddReplaceDBPage', {
  dbid: 'bddnn3uz9',
  pagename: 'newpage.html',
  pageid: 12,
  pagetype: 1,
  pagebody: '<html></html>'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

// Adding a new DB Page
try {
  $results = $quickbase->api('API_AddReplaceDBPage', array(
    'dbid' => 'bddnn3uz9',
    'pagename' => 'newpage.html',
    'pagetype' => 1,
    'pagebody' => '<html></html>'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

// Updating an existing DB Page
try {
  $results = $quickbase->api('API_AddReplaceDBPage', array(
    'dbid' => 'bddnn3uz9',
    'pagename' => 'newpage.html',
    'pageid' => 12,
    'pagetype' => 1,
    'pagebody' => '<html></html>'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_AddReplaceDBPage",
  "errcode": 0,
  "errtext": "No error",
  "pageID": 12
}
```

<a href='https://help.quickbase.com/api-guide/add_replace_dbpage.html' target='_blank'>Quick Base Documentation</a>

Use API_AddReplaceDBPage to add a new database page or replace an existing page with a new page. You invoke this call on an application (dbid).

Quick Base allows you to store various types of pages at the application level. These pages can be various text or rich text or HTML page that you store and link to buttons in the Quick Base UI. They can also be XSL templates used for customizing the Quick Base application. They can also be Exact Forms, which are forms (form letters, invoices, etc.) created in Microsoft Word using the Quick Base Exact Form template that gets data from Quick Base tables.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
pagename | true | | The name of the DB Page
pageid | true, if updating | | The id of the DB Page you wish to update
pagetype | true | | Page type value, possible values are 1 for XSL stylesheets or HTML Pages and 3 for Exact Forms
pagebody | true | | Contains the contents of the page you are adding.

### API_AddSubGroup

```javascript--node
quickbase.api('API_AddSubGroup', {
  gid: '345889.sdfs',
  subgroupid: '820935.ksjf'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_AddSubGroup', {
  gid: '345889.sdfs',
  subgroupid: '820935.ksjf'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_AddSubGroup', array(
    'gid' => '345889.sdfs',
    'subgroupid' => '820935.ksjf'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_AddSubGroup",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/API_AddSubGroup.html' target='_blank'>Quick Base Documentation</a>

Use API_AddSubGroup to embed a group into another group.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
gid | true | | The id of the group which will contain the subgroup.
subgroupid | true | | The id of the group to be embedded in the target group.

### API_AddUserToGroup

```javascript--node
quickbase.api('API_AddUserToGroup', {
  gid: '345889.sdfd',
  userid: '898790.qntp',
  allowAdminAccess: false
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_AddUserToGroup', {
  gid: '345889.sdfd',
  userid: '898790.qntp',
  allowAdminAccess: false
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_AddUserToGroup', array(
    'gid' => '345889.sdfd',
    'userid' => '898790.qntp',
    'allowAdminAccess' => false
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_AddUserToGroup",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/API_AddUserToGroup.html' target='_blank'>Quick Base Documentation</a>

Use API_AddUserToGroup to add a user to a group. The user can be added as a member of the group, as a member and a manager of the group, or as a manager but not a member of the group.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
gid | true | | The id of the group to manage.
uid | true | | The id of the Quick Base user to add to the group.
email | false | | The email of the Quick Base user
screenName | false | | The screen name of the Quick Base user, if set
allowAdminAccess | false | false | Whether the user should be added as an admin of the group.

### API_AddUserToRole

```javascript--node
quickbase.api('API_AddUserToRole', {
  dbid: 'bddnn3uz9',
  userid: '112245.efy7',
  roleid: 10
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_AddUserToRole', {
  dbid: 'bddnn3uz9',
  userid: '112245.efy7',
  roleid: 10
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_AddUserToRole', array(
    'dbid' => 'bddnn3uz9',
    'userid' => '112245.efy7',
    'roleid' => 10
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_AddUserToRole",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/add_user_to_role.html' target='_blank'>Quick Base Documentation</a>

Use API_AddUserToRole to assign a user to a role in your Quick Base application.

You assign a user to a role using API_AddUserToRole. After you assign the role, you can use API_SendInvitation to invite the user to the application.

You can invoke this call on a single user several times, applying a different role each time, if you want give the user more than one role. Giving a user more than one role allows the user to sign in to the same Quick Base application with different roles. (Note that if you try to assign a role the user already has, you'll see an error message.)

Quick Base supplies standard default roles for each application: viewer, participant, and administrator. You can change these and even create custom roles for your applications. You can find out which roles are being used for a particular application using the API_GetRoleInfo call.

Note: You can also assign roles to users when you provision users. See API_ProvisionUser for more information.

To assign roles to users using the Quick Base API or UI, you must have either Basic Access with Sharing access or Full Administration access to the application. Note that, if you have Basic Access with Sharing permissions, you cannot add a user to a role that has Full Administration permissions.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
userid | true | | The userid of the user to be added to the access role.
roleid | true | | The ID of the access role being assigned to the user.

### API_Authenticate

```javascript--node
quickbase.api('API_Authenticate', {
  username: 'PTBarnum',
  password: 'TopSecret',
  hours: 12
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_Authenticate', {
  username: 'PTBarnum',
  password: 'TopSecret',
  hours: 12
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_Authenticate', array(
    'username' => 'PTBarnum',
    'password' => 'TopSecret',
    'hours' => 12
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_Authenticate",
  "errcode": 0,
  "errtext": "No error",
  "ticket": "2_beeinrxmv_dpvx_b_crf8ttndjwyf9bui94rhciirqcs",
  "userid": "112245.efy7"
}
```

<a href='https://help.quickbase.com/api-guide/authenticate.html' target='_blank'>Quick Base Documentation</a>

Use API_Authenticate to validate a user's username and password. You invoke this call on /db/main (no dbid).

API_Authenticate validates the supplied user name and password, and, if successful, returns a ticket that is supplied in subsequent API calls. The ticket is valid for 12 hours, unless you specify a different value in the hours parameter. In addition to the ticket, a cookie is also returned with the name TICKET. This is the only API call that returns a ticket cookie.

Note: It is possible to use a ticket to obtain a ticket (that is, pass in a ticket instead of a username and password).

Using API_Authenticate is the equivalent of logging into Quick Base. Remember that merely logging into Quick Base by itself does not give you access rights to even a single Quick Base application. You must first be assigned a role in the application by someone who has administrator rights. (See API Overview for more information about how to use the authentication ticket when making API calls.)

You should always use secure HTTPS (not HTTP) when calling API_Authenticate. Quick Base does not support API calls over HTTP.

Note: API_Authenticate calls have a maximum time limit of 4,380 hours, or approximately 6 months. This applies to new tickets initiated on or after January 21, 2018.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
username | true | | The user’s email address registered with Quick Base or the user name that was selected within Quick Base when the user registered.
password | true | | The user’s Quick Base password.
hours | false | 12 | The number of hours that the ticket will be valid. There is a maximum time limit of 4,380 hours or approximately 6 months.

### API_ChangeGroupInfo

```javascript--node
quickbase.api('API_ChangeGroupInfo', {
  gid: '345889.sdjl',
  name: 'AcmeSalesTeamLeads',
  description: 'Team Leaders for the Acme division',
  accountID: 456789,
  allowsAdminAccess: false
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_ChangeGroupInfo', {
  gid: '345889.sdjl',
  name: 'AcmeSalesTeamLeads',
  description: 'Team Leaders for the Acme division',
  accountID: 456789,
  allowsAdminAccess: false
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_ChangeGroupInfo', array(
    'gid' => '345889.sdjl',
    'name' => 'AcmeSalesTeamLeads',
    'description' => 'Team Leaders for the Acme division',
    'accountID' => 456789,
    'allowsAdminAccess' => false
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_ChangeGroupInfo",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/API_ChangeGroupInfo.html' target='_blank'>Quick Base Documentation</a>

Use API_ChangeGroupInfo to modify the metadata for a group. One or more elements can be modified.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
gid | true | | The id of the group to manage.
name | false | | The name of the new group. It may not contain spaces or punctuation.
description | false | | A text description of the group.
accountId | false | | The account that will own the group.

### API_ChangeManager

```javascript--node
quickbase.api('API_ChangeManager', {
  dbid: 'bddnn3uz9',
  newmgr: 'angela_leon@gmail.com'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_ChangeManager', {
  dbid: 'bddnn3uz9',
  newmgr: 'angela_leon@gmail.com'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_ChangeManager', array(
    'dbid' => 'bddnn3uz9',
    'newmgr' => 'angela_leon@gmail.com'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_ChangeManager",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/API_ChangeManager.html' target='_blank'>Quick Base Documentation</a>

Use API_ChangeManager to assign a user to manage an app.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
newmgr | true | | A valid email address for the new app manager

### API_ChangeRecordOwner

```javascript--node
quickbase.api('API_ChangeRecordOwner', {
  dbid: 'bddnn3uz9',
  rid: 3,
  newowner: 'Muggsy'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_ChangeRecordOwner', {
  dbid: 'bddnn3uz9',
  rid: 3,
  newowner: 'Muggsy'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_ChangeRecordOwner', array(
    'dbid' => 'bddnn3uz9',
    'rid' => 3,
    'newowner' => 'Muggsy'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_ChangeRecordOwner",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/change_record_owner.html' target='_blank'>Quick Base Documentation</a>

Use API_ChangeRecordOwner to change the owner of a record.

In Quick Base, a person who creates a record is the record owner. You can set up roles that restrict a record's view/modify access to the record owner. On occasion, you may need to transfer record ownership from one user to another. If you are using a technical support application, for instance, you might want to transfer ownership of a support incident (record) from one tech support rep to another.

You must have Full Administration rights on the application to use this call.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
rid <i>or</i> key | true | |  The record ID. Every record in every table has a unique rid.<br /><br />Normally, the record ID is the key field for the record. If you set your record's key field to a field OTHER than the record id (rid), you should use the key parameter rather than rid.
newowner | true | | Specifies the user to whom you are transferring ownership. (Email address or username)

### API_ChangeUserRole

```javascript--node
quickbase.api('API_ChangeUserRole', {
  dbid: 'bddnn3uz9',
  userid: '112248.5nzg',
  roleid: 11,
  newroleid: 12
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_ChangeUserRole', {
  dbid: 'bddnn3uz9',
  userid: '112248.5nzg',
  roleid: 11,
  newroleid: 12
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_ChangeUserRole', array(
    'dbid' => 'bddnn3uz9',
    'userid' => '112248.5nzg',
    'roleid' => 11,
    'newroleid' => 12
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_ChangeUserRole",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/change_user_role.html' target='_blank'>Quick Base Documentation</a>

Use API_ChangeUserRole to assign a user to a new role, to upgrade or downgrade access, or simply to move the user to a different role.

You can also use this call to assign the user to a special role called None (role id 9) which removes the user's access to the application. Use the None role if you want to disable access while retaining the user on the application user list.

To assign roles to users using the Quick Base API or UI, you must have either Basic Access with Sharing access or Full Administration access to the application. Note that, if you have Basic Access with Sharing permissions, you cannot add a user to a role that has Full Administration permissions.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
userid | true | | The user ID. You can use API_GetUserInfo to get the user ID for a particular user.
roleid | true | | The user’s current role in the application
newroleid | false | 9 | If this parameter is not supplied, or is supplied but left blank, the role id is set to 9 (None). If this parameter is supplied with an invalid role id (including 0), the API call will return an error.

### API_CloneDatabase

```javascript--node
quickbase.api('API_CloneDatabase', {
  dbid: 'bddnn3uz9',
  newdbname: 'YellowDots',
  newdbdesc: 'Database copy with no data',
  keepData: true,
  exludeFiles: true,
  usersandroles: false
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_CloneDatabase', {
  dbid: 'bddnn3uz9',
  newdbname: 'YellowDots',
  newdbdesc: 'Database copy with no data',
  keepData: true,
  exludeFiles: true,
  usersandroles: false
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_CloneDatabase', array(
    'dbid' => 'bddnn3uz9',
    'newdbname' => 'YellowDots',
    'newdbdesc' => 'Database copy with no data',
    'keepData' => true,
    'exludeFiles' => true,
    'usersandroles' => false
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_CloneDatabase",
  "errcode": 0,
  "errtext": "No error",
  "newdbid": "bddnc6pn7"
}
```

<a href='https://help.quickbase.com/api-guide/clone_database.html' target='_blank'>Quick Base Documentation</a>

Use API_CloneDatabase to make a copy of a Quick Base application. You can choose to use the keepData parameter if you want to copy the application's data in addition to its structure. If you want to copy data, but exclude file attachments, you can use the excludefiles parameter in your request. After you copy an application, changes to the source application will not affect the copy you created, and vice versa.

When you copy a Quick Base application, all users with access to the original application automatically have access to the application copy. You can choose to remove some or all of these users from the application copy using the API_RemoveUserFromRole.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
newdbname | true | | Specifies a name for the new application.
newdbdesc | false | | Specifies the description for the new application.
keepData | false | false | Copy data or not into the new application
excludefiles | false | true | Specifies that you do not want to copy file attachments when you copy an application.
usersandroles | false | false | If true, users will be assigned roles, if false, users and roles will be copied separately

### API_CopyGroup

```javascript--node
quickbase.api('API_CopyGroup', {
  gid: '1213.dsfj',
  name: 'SalesTeamLeadsCopy',
  description: 'Copy of the current Sales Team Leads Group',
  gacct: ''
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_CopyGroup', {
  gid: '1213.dsfj',
  name: 'SalesTeamLeadsCopy',
  description: 'Copy of the current Sales Team Leads Group',
  gacct: ''
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_CopyGroup', array(
    'gid' => '1213.dsfj',
    'name' => 'SalesTeamLeadsCopy',
    'description' => 'Copy of the current Sales Team Leads Group',
    'gacct' => ''
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_CopyGroup",
  "errcode": 0,
  "errtext": "No error",
  "group": {
    "id" => "1219.d47h",
    "name" => "SalesTeamLeadsCopy",
    "description" => "Copy of the current Sales Team Leads Group",
    "managedByUser" => true
  }
}
```

<a href='https://help.quickbase.com/api-guide/API_CopyGroup.html' target='_blank'>Quick Base Documentation</a>

Use API_CopyGroup to duplicate an existing group with the same list of users and subgroups, and a different name and ID.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
gid | true | | The id of the group to manage.
name | true | | The name of the new group.
description | false | | A description of the group. Default is the description of the source group.
gacct | false | account for the source group | The account used for the group

### API_CopyMasterDetail

```javascript--node
quickbase.api('API_CopyMasterDetail', {
  dbid: 'bddnn3uz9',
  destrid: 0,
  sourcerid: 1,
  copyfid: 6,
  recurse: true,
  relfids: 'all'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_CopyMasterDetail', {
  dbid: 'bddnn3uz9',
  destrid: 0,
  sourcerid: 1,
  copyfid: 6,
  recurse: true,
  relfids: 'all'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_CopyMasterDetail', array(
    'dbid' => 'bddnn3uz9',
    'destrid' => 0,
    'sourcerid' => 1,
    'copyfid' => 6,
    'recurse' => true,
    'relfids' => 'all'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_CopyMasterDetail",
  "errcode": 0,
  "errtext": "No error",
  "parentrid": 1,
  "numcreated": 4
}
```

<a href='https://help.quickbase.com/api-guide/API_CopyMasterDetail.html' target='_blank'>Quick Base Documentation</a>

Use API_CopyMasterDetail to copy a master record with its detail records, or to import only the detail records from one master record into a different master record. For example, you could copy a master Project record and its detail Task records.  You also could import only the Task records from a selected master Project record into a different Project record.

You invoke this call on a table-level dbid for the master table to which you are copying or importing records.

API_CopyMasterDetail copies or imports all fields in selected records, regardless of the fields' permission and Auto-Fill settings.  (When Auto-Fill is enabled, a field's value is copied when a user clicks the "Add Similar" button to add a new Project.)

This API does not copy file attachments with the records.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
destrid | true | | The record id of the destination record to which you want the records copied.<br /><br />If you want to copy the source master record and its detail records, set this to 0.<br /><br />If you want to import detail records from a different master record, set this to the record id of the master record to which you want to import the detail records.
sourcerid | true | | The record id of the source record from which you want to copy detail records.
copyfid | true | | The field id of a text field used in the name of the new record, if destrid = 0. The name becomes “Copy of field value".<br /><br />This field cannot be a lookup, append-only text, or formula field.  It also cannot be a unique or snapshot field.
recurse | false | true |  
Set this parameter to true to copy all detail records associated with the master record's detail records recursively.  This API supports up to 10 levels of recursion.
relfids | false | all | A list of comma-separated report link field ids that specify the relationships you want to be copied.<br /><br />For example:<br /><relfids>7,9</relfids>

### API_CreateDatabase

```javascript--node
quickbase.api('API_CreateDatabase', {
  dbname: 'FuelCharter',
  dbdesc: 'Vehicle and Fuel Cost Tracker',
  createapptoken: true
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_CreateDatabase', {
  dbname: 'FuelCharter',
  dbdesc: 'Vehicle and Fuel Cost Tracker',
  createapptoken: true
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_CreateDatabase', array(
    'dbname' => 'FuelCharter',
    'dbdesc' => 'Vehicle and Fuel Cost Tracker',
    'createapptoken' => true
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_CreateDatabase",
  "errcode": 0,
  "errtext": "No error"
  "dbid": 'bddnn3uz9',
  "appdbid": 'bddnn3ub7',
  "apptoken": 'cmzaaz3dgdmmwwksdb7zcd7a9wg'
}
```

<a href='https://help.quickbase.com/api-guide/create_database.html' target='_blank'>Quick Base Documentation</a>

Use API_CreateDatabase to create a new Quick Base application. Quick Base creates the main application table populated only with built-in fields and returns an application token for your API application.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbname | true | | The name of the new application
dbdesc | true | | The description for the new application.
createapptoken | false | false | Generate an application token for the new application

### API_CreateGroup

```javascript--node
quickbase.api('API_CreateGroup', {
  name: 'MarketingSupport',
  description: 'Support staff for sr marketing group',
  accountID: 456789
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_CreateGroup', {
  name: 'MarketingSupport',
  description: 'Support staff for sr marketing group',
  accountID: 456789
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_CreateGroup', array(
    'name' => 'MarketingSupport',
    'description' => 'Support staff for sr marketing group',
    'accountID' => 456789
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_CreateGroup",
  "errcode": 0,
  "errtext": "No error",
  "group": {
    "id" => "1219.d47h",
    "name" => "SalesTeamLeadsCopy",
    "description" => "Copy of the current Sales Team Leads Group",
    "managedByUser" => true
  }
}
```

<a href='https://help.quickbase.com/api-guide/API_CreateGroup.html' target='_blank'>Quick Base Documentation</a>

Use API_CreateGroup to create a new group. The group will be created with the caller as the group owner and the caller will also be the first user in the group.

The call needs an account id which will be the associated account for the group, unless the call is made to a realm with only one account. If the realm only has one account, then the account associated with the realm will be the group account.

If a realm has more than one account, the accountID parameter will be used to disambiguate the associated account for the group.

The caller (user) must be the manager of the account where the group is created.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
name | true | | The name of the new group. It may not contain spaces or punctuation.
description | true | | A text description of the group.
accountID | false | | The account that will own the group.

### API_CreateTable

```javascript--node
quickbase.api('API_CreateTable', {
  dbid: 'bddnn3uz9',
  tname: 'My Vehicle List',
  pnoun: 'Vehicles'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_CreateTable', {
  dbid: 'bddnn3uz9',
  tname: 'My Vehicle List',
  pnoun: 'Vehicles'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_CreateTable', array(
    'dbid' => 'bddnn3uz9',
    'tname' => 'My Vehicle List',
    'pnoun' => 'Vehicles'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_CreateTable",
  "errcode": 0,
  "errtext": "No error",
  "newdbid": "bddfa5nbx"
}
```

<a href='https://help.quickbase.com/api-guide/create_table.html' target='_blank'>Quick Base Documentation</a>

Use API_CreateTable to create a table for an application. You must have application administration rights to use this call. The dbid you supply must be an application-level dbid, not a table-level dbid.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
tname | false | Records | The name you want to use for the name of the table.
pnoun | false | Records | The name you want to use for records in the table. You should use a plural noun that can apply to all records in the table. For example, if each table row contains information about a vehicle that your company owns, you might want to use "Vehicles" as your pnoun.

### API_DeleteDatabase

```javascript--node
quickbase.api('API_DeleteDatabase', {
  dbid: 'bddnn3uz9'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_DeleteDatabase', {
  dbid: 'bddnn3uz9'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_DeleteDatabase', array(
    'dbid' => 'bddnn3uz9'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_DeleteDatabase",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/delete_database.html' target='_blank'>Quick Base Documentation</a>

Use API_DeleteDatabase to delete a table or an entire application. Supply an application-level dbid to delete an application; supply a table-level dbid to delete a table.

If you use this API to delete an app, you must be the app manager, or the API will return an error. If you use this API to delete a table, you must have Full Administration permissions in the app, or the API will return an error.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application or Table DBID

### API_DeleteField

```javascript--node
quickbase.api('API_DeleteField', {
  dbid: 'bddnn3uz9',
  fid: 6
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_DeleteField', {
  dbid: 'bddnn3uz9',
  fid: 6
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_DeleteField', array(
    'dbid' => 'bddnn3uz9',
    'fid' => 6
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_DeleteField",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/delete_field.html' target='_blank'>Quick Base Documentation</a>

Use API_DeleteField to delete a field by specifying the field id (fid). You invoke this call on a table-level dbid. (If you use an application level dbid, Quick Base returns an error.)

You must have Full Administration permissions on the application to use this call.

This call deletes the field for all records, regardless of whether the field contains data. Note that the call does not issue a warning message before the deletion.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
fid | true | | Field ID you wish to delete

### API_DeleteGroup

```javascript--node
quickbase.api('API_DeleteGroup', {
  gid: '345889.skef'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_DeleteGroup', {
  gid: '345889.skef'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_DeleteGroup', array(
    'gid' => '345889.skef'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_DeleteGroup",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/API_DeleteGroup.html' target='_blank'>Quick Base Documentation</a>

Use API_DeleteGroup to delete a group.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
gid | true | | The id of the group to delete.

### API_DeleteRecord

```javascript--node
quickbase.api('API_DeleteRecord', {
  dbid: 'bddnn3uz9',
  rid: 6
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_DeleteRecord', {
  dbid: 'bddnn3uz9',
  rid: 6
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_DeleteRecord', array(
    'dbid' => 'bddnn3uz9',
    'rid' => 6
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_DeleteRecord",
  "errcode": 0,
  "errtext": "No error",
  "rid": 6
}
```

<a href='https://help.quickbase.com/api-guide/delete_record.html' target='_blank'>Quick Base Documentation</a>

Use API_DeleteRecord to delete a single record from a table.  You invoke this call on a table-level dbid. If you use an application level dbid, you’ll get an error.

You must have Full Administration permissions on the application to use this call.

Note that this call allows you to delete one record at a time. If you want to delete several records at once, see API_PurgeRecords.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
rid <i>or</i> key | true | | The record ID of the record to be deleted. If the primary key of the table is not the [Record ID#] field, you should use `key` and the primary key as the value

### API_DoQuery

```javascript--node
quickbase.api('API_DoQuery', {
  dbid: 'bddnn3uz9',
  query: "{'5'.CT.'Ragnar Lodbrok'}AND{'5'.CT.'Acquisitions'}",
  /* qid: 1, */
  /* qname: 'List All', */
  clist: '3',
  slist: '3',
  options: 'num-r.sortorder-A.skp-10.onlynew',
  fmt: 'structured',
  returnpercentage: true,
  includeRids: true
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_DoQuery', {
  dbid: 'bddnn3uz9',
  query: "{'5'.CT.'Ragnar Lodbrok'}AND{'5'.CT.'Acquisitions'}",
  /* qid: 1, */
  /* qname: 'List All', */
  clist: '3',
  slist: '3',
  options: 'num-r.sortorder-A.skp-10.onlynew',
  fmt: 'structured',
  returnpercentage: true,
  includeRids: true
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_DoQuery', array(
    'dbid' => 'bddnn3uz9',
    'query' => "{'5'.CT.'Ragnar Lodbrok'}AND{'5'.CT.'Acquisitions'}",
    /* 'qid' => 1, */
    /* 'qname' => 'List All', */
    'clist' => '3',
    'slist' => '3',
    'options' => 'num-r.sortorder-A.skp-10.onlynew',
    'fmt' => 'structured',
    'returnpercentage' => true,
    'includeRids' => true
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_DoQuery",
  "errcode": 0,
  "errtext": "No error",
  "qid": -1,
  "qname": "",
  "table": {
    "name": "API created Sample",
    "desc": "This is a sample table.",
    "original": {
      "table_id": "bh9ckdaue",
      "app_id": "bh9ckc9ft",
      "cre_date": 1204586581894,
      "mod_date": 1206583187767,
      "next_record_id": 34,
      "next_field_id": 24,
      "next_query_id": 5,
      "def_sort_fid": 6,
      "def_sort_order": 1
    },
    "variables": {
      "Blue": 14,
      "Jack": 14,
      "Magenta": 12,
      "usercode": 14
    },
    "queries": [
      {
        "id": 1,
        "qyname": "List All",
        "qytype": "table",
        "qycalst": "0.0"
      }
    ],
    "fields": [
      {
        "id": 3,
        "field_type": "recordid",
        "base_type": "int32",
        "role": "recordid",
        "mode": "virtual",
        "label": "Record ID#",
        "nowrap": 1,
        "bold": 1,
        "required": 0,
        "appears_by_default": 0,
        "find_enabled": 1,
        "allow_new_choices": 0,
        "sort_as_given": 0,
        "default_value": 10,
        "carrychoices": 1,
        "foreignkey": 0,
        "unique": 1,
        "doesdatacopy": 0,
        "fieldhelp": "",
        "comma_start": 0,
        "does_average": 0,
        "does_total": 0,
        "blank_is_zero": 0
      }
    ],
    "lastluserid": 0,
    "lusers": [
      {
        "id": "112149.bhsv",
        "name": "AppBoss"
      }
    ],
    "records": [
      {
        "rid": 4,
        "3": 4
      }
    ]
  }
}
```

<a href='https://help.quickbase.com/api-guide/do_query.html' target='_blank'>Quick Base Documentation</a>

Use API_DoQuery to get records from a table. You invoke this call on a table-level dbid. You can use the parameters (described below) to define which columns will be returned, how many records will be returned and how they will be sorted, and whether the Quick Base should return structured data.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
query <i>or</i> qid <i>or</i> qname | false | all | Specifies the query. You can use any of these three options:<br /><br />Use `query` to build your own query string.<br />Use `qid` if you want to use a saved query and want to use its query ID.<br />Use `qname` if you want to use a saved query and refer to it by its query name.
clist | false | default table columns | A period-delimited list of field IDs to be returned. Quick Base will return values for these field IDs in the order in which you enter them here. To return all fields use a value of `a`
slist | false | default table sort | A period-delimited list of field IDs
options | false | | Specifies return options for the query. You can use any or all of the options, separating the options with a period.<br /><br />num-n --specifies a maximum of n records in the return<br />onlynew --returns only those records marked with new or updated flags<br />skp-n --skips the first n records returned by the query<br />sortorder-A --specifies an ascending order<br />sortorder-D --specifies a descending order<br />nosort --returns unsorted records, ignoring the sortorder option, the slist parameter, and the default sort for the table
fmt | false | global instance setting | Set this parameter to structured to specify that the query should return structured data.
returnpercentage | false | global instance setting | Specifies whether Numeric - Percent values in the returned data will be percentage format (10% is shown as 10) or decimal format (10% is shown as .1).
includeRids | false | global instance setting | Specifies that the record IDs of each record should be returned.

### API_DoQueryCount

```javascript--node
quickbase.api('API_DoQueryCount', {
  dbid: 'bddnn3uz9',
  query: "{'7'.XCT.'blue car'}"
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_DoQueryCount', {
  dbid: 'bddnn3uz9',
  query: "{'7'.XCT.'blue car'}"
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_DoQueryCount', array(
    'dbid' => 'bddnn3uz9',
    'query' => "{'7'.XCT.'blue car'}"
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_DoQueryCount",
  "errcode": 0,
  "errtext": "No error",
  "numMatches": 1
}
```

<a href='https://help.quickbase.com/api-guide/do_query_count.html' target='_blank'>Quick Base Documentation</a>

You invoke this call against a table dbid using a query string to determine the number of records that will be returned.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
query <i>or</i> qid <i>or</i> qname | false | all | Specifies the query. You can use any of these three options:<br /><br />Use `query` to build your own query string.<br />Use `qid` if you want to use a saved query and want to use its query ID.<br />Use `qname` if you want to use a saved query and refer to it by its query name.

### API_EditRecord

```javascript--node
quickbase.api('API_EditRecord', {
  dbid: 'bddnn3uz9',
  rid: 17,
  /* update_id: 1205700075470, */
  fields: [
    { fid: 6, value: 'Hi!' },
    { name: 'File Attachment', value: 'base64', filename: 'image.png' }
  ],
  disprec: false,
  fform: false,
  ignoreError: false,
  msInUTC: true
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_EditRecord', {
  dbid: 'bddnn3uz9',
  rid: 17,
  /* update_id: 1205700075470, */
  fields: [
    { fid: 6, value: 'Hi!' },
    { name: 'File Attachment', value: 'base64', filename: 'image.png' }
  ],
  disprec: false,
  fform: false,
  ignoreError: false,
  msInUTC: true
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_EditRecord', array(
    'dbid' => 'bddnn3uz9',
    'rid' => 17,
    /* 'update_id' => 1205700075470, */
    'fields' => array(
      array( 'fid' => 6, 'value' => 'Hi!' ),
      array( 'name' => 'File Attachment', 'value' => 'base64...', 'filename' => 'image.png' )
    ),
    'disprec' => false,
    'fform' => false,
    'ignoreError' => false,
    'msInUTC' => true
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_EditRecord",
  "errcode": 0,
  "errtext": "No error",
  "rid": 17,
  "num_fields_changed": 2,
  "update_id": 1205700275470
}
```

<a href='https://help.quickbase.com/api-guide/edit_record.html' target='_blank'>Quick Base Documentation</a>

Use API_EditRecord to change any editable field values in the specified record. Only those fields specified are changed; unspecified fields are left unchanged.

You can specify either field names or field IDs when using this call.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
rid <i>or</i> key | true | | 
update_id | false | | Specifies the latest record state.<br /><br />Note that, if another user makes changes before you issue this call,  the update ID in Quick Base will change, which will render invalid the update ID that you have. In this case, you should get the latest version of the record and its new update ID, and then make your changes.<br /><br />You can obtain the update ID for a record using the API_GetRecordInfo for the record you are editing.
fields | true | | Array of objects with fid/value parameters
disprec | false | false | Set this parameter to true to specify that the new record should be displayed within the Quick Base application. An application login is required before the record can be displayed. If you use this parameter, Quick Base returns the normal Quick Base HTML page that displays the record.
fform | false | false | Set this parameter to true if you are invoking API_EditRecord from within an HTML form that has checkboxes and want those checkboxes to set Quick Base checkbox fields.
ignoreError | false | false | Set this parameter to true to specify that no error should be returned when a built-in field (for example, Record ID#) is written-to in an API_EditRecord call.
msInUTC | false | false | Allows you to specify that Quick Base should interpret all date/time stamps passed in as milliseconds using Coordinated Universal Time (UTC) rather than using the local application time.


### API_FieldAddChoices

```javascript--node
quickbase.api('API_FieldAddChoices', {
  dbid: 'bddnn3uz9',
  fid: 11,
  choice: 'Don Tomas'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_FieldAddChoices', {
  dbid: 'bddnn3uz9',
  fid: 11,
  choice: 'Don Tomas'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_FieldAddChoices', array(
    'dbid' => 'bddnn3uz9',
    'fid' => 11,
    'choice' => 'Don Tomas'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_FieldAddChoices",
  "errcode": 0,
  "errtext": "No error",
  "fid": 11,
  "fname": "Fumables",
  "numadded": 1
}
```

<a href='https://help.quickbase.com/api-guide/field_add_choices.html' target='_blank'>Quick Base Documentation</a>

Use this call to add new choices to a text - multiple choice or multi-select text field in a Quick Base table.

Note: Choices added to a multi-select text field are limited to 60 characters, and the total number of choices in the field may not exceed 100.

If you have Full Administration rights on the application, you can add new choices to any field of those types. If you don’t have these rights, you can use this call only on fields with properties that are set to allow users to add new choices. (In the Quick Base UI, you can set the Allow users to create new choices field property to allow users to do this. You can also set this property using API_SetFieldProperties.)

If the choice you specify already exists in the list, it will not be added. No duplicates are allowed.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
fid | true | | The field ID of the setfield to which you want to add choices.
choice | true | | Specifies a choice you want to add. Use this tag multiple times to add more than one choice.

### API_FieldRemoveChoices

```javascript--node
quickbase.api('API_FieldRemoveChoices', {
  dbid: 'bddnn3uz9',
  fid: 11,
  choice: 'Black'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_FieldRemoveChoices', {
  dbid: 'bddnn3uz9',
  fid: 11,
  choice: 'Black'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_FieldRemoveChoices', array(
    'dbid' => 'bddnn3uz9',
    'fid' => 11,
    'choice' => 'Black'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_FieldRemoveChoices",
  "errcode": 0,
  "errtext": "No error",
  "fid": 11,
  "fname": "Color Choice",
  "numremoved": 1
}
```

<a href='https://help.quickbase.com/api-guide/field_remove_choices.html' target='_blank'>Quick Base Documentation</a>

Use this call this to remove one or more of the options listed within a Text - Multiple Choice or Multi-select Text field in a Quick Base application. You can remove any choices that you created yourself. You must have Full Administration rights on the application to remove choices you did not create. 

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
fid | true | | The field ID of the setfield to which you want to remove choices.
choice | true | | Specifies a choice you want to remove. Use this tag multiple times to add more than one choice.<br /><br />If any choice you specify cannot be removed (either because it does not exist, or because you lack permission to remove it), other valid choices you specify will be removed.<br /><br />The operation will be considered successful if at least one choice is removed.  You should check the numremoved response value to make sure all the fields you expected were removed.

### API_FindDBByName

```javascript--node
quickbase.api('API_FindDBByName', {
  dbname: 'TestTable',
  ParentsOnly: false
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_FindDBByName', {
  dbname: 'TestTable',
  ParentsOnly: false
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_FindDBByName', array(
    'dbname' => 'TestTable',
    'ParentsOnly' => false
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_FindDBByName",
  "errcode": 0,
  "errtext": "No error",
  "dbid": "bdcagynhs"
}
```

<a href='https://help.quickbase.com/api-guide/find_db_by_name.html' target='_blank'>Quick Base Documentation</a>

Use API_FindDBByName to find the application-level dbid of an application whose name you know. When you use this call, Quick Base searches only those applications to which you have access. Because you can have multiple applications with the same name, you should be aware that more than one application dbid can be returned.

If a Quick Base application consists of a single table, this call returns the child dbid of that table (NOT the application dbid). If you want to find the application-level dbid in this case, set the parentsOnly parameter to 1 for the request.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbname | true | | The name of the application you want to find
ParentsOnly | false | false | Ensures an app ID is returned, regardless of whether the application contains a single table or not.<br /><br />Note that, in applications that contain more than one table, Quick Base always returns the app dbid, regardless of whether you use this parameter or not. However, if an application contains only a single table, Quick Base returns the table DBID if you do not specify this parameter.<br /><br />If you are not sure whether your app contains more than one table, or if you are sure it contains only a single table, set this parameter to 1 to make sure an app dbid is returned.

### API_GenAddRecordForm

```javascript--node
quickbase.api('API_GenAddRecordForm', {
  dbid: 'bddnn3uz9',
  fields: [
    { name: 'Vehicle Make', value: 'Ford' }
  ]
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GenAddRecordForm', {
  dbid: 'bddnn3uz9',
  fields: [
    { name: 'Vehicle Make', value: 'Ford' }
  ]
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GenAddRecordForm', array(
    'dbid' => 'bddnn3uz9',
    'fields' => array(
      array( 'name' => 'Vehicle Make', 'value' => 'Ford' )
    )
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> Unlike most API calls, the above returns a string of the desired forms HTML rather than an object with properties.

<a href='https://help.quickbase.com/api-guide/gen_add_record_form.html' target='_blank'>Quick Base Documentation</a>

Use API_GenAddRecordForm to return the standard Quick Base Add record page for the table whose dbid you specify. The form contains edit fields for the user to complete and a Save button to add the record to the database.

If you want to pre-fill any fields, you can do so by supplying one or more field/value pairs in the request. Any fields not pre-filled or completed by the user are set to the default values set in the table field properties.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
fields | true | | Array of objects with fid/value parameters

### API_GenResultsTable

```javascript--node
quickbase.api('API_GenResultsTable', {
  dbid: 'bddnn3uz9',
  query: "{'11'.CT.'Bob'}AND{'19'.GTE.'5'}",
  /* qid: 1, */
  /* qname: 'List All', */
  clist: '6.7.9.11.16',
  slist: '11.6'
  options: 'num-4.sortorder-D',
  jht: 'n',
  jsa: false
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GenResultsTable', {
  dbid: 'bddnn3uz9',
  query: "{'11'.CT.'Bob'}AND{'19'.GTE.'5'}",
  /* qid: 1, */
  /* qname: 'List All', */
  clist: '6.7.9.11.16',
  slist: '11.6'
  options: 'num-4.sortorder-D',
  jht: 'n',
  jsa: false
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GenResultsTable', array(
    'dbid' => 'bddnn3uz9',
    'query' => "{'11'.CT.'Bob'}AND{'19'.GTE.'5'}",
    /* 'qid' => 1, */
    /* 'qname' => 'List All', */
    'clist' => '6.7.9.11.16',
    'slist' => '11.6'
    'options' => 'num-4.sortorder-D',
    'jht' => 'n',
    'jsa' => false
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> Unlike most API calls, the above returns a string of the desired table HTML rather than an object with properties.

<a href='https://help.quickbase.com/api-guide/gen_results_table.html' target='_blank'>Quick Base Documentation</a>

Use API_GenResultsTable to embed a Quick Base table report in an HTML page.

This call is typically used in its URL form embedded in an HTML page. When the HTML page is opened in a browser, the call runs automatically and returns results to qdbWrite() for display in the HTML page.

You can also specify that the results should be returned as a JavaScript array, in CSV format, or as tab separated values.

By default, API_GenResultsTable returns the same number of rows as would be returned in the UI. However, you can specify a different number of rows in your table by including num-n in the options parameter.

You can split a result set into several tables by calling API_GenResultsTable once for each table, using the skp option after the first invocation to skip over the records already returned.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
query <i>or</i> qid <i>or</i> qname | false | all | Specifies the query. You can use any of these three options:<br /><br />Use `query` to build your own query string.<br />Use `qid` if you want to use a saved query and want to use its query ID.<br />Use `qname` if you want to use a saved query and refer to it by its query name.
clist | false | default table columns | A period-delimited list of field IDs to be returned. Quick Base will return values for these field IDs in the order in which you enter them here. To return all fields use a value of `a`
slist | false | default table sort | A period-delimited list of field IDs
options | false | | Specifies return options for the query. You can use any or all of the options, separating the options with a period.<br /><br />num-n --specifies a maximum of n records in the return<br />onlynew --returns only those records marked with new or updated flags<br />skp-n --skips the first n records returned by the query<br />sortorder-A --specifies an ascending order<br />sortorder-D --specifies a descending order<br />nosort --returns unsorted records, ignoring the sortorder option, the slist parameter, and the default sort for the table
jht | true | | Returns the HTML for a table as a JavaScript function named qdbWrite(). You can then embed the HTML table into a Web page by calling the JavaScript function in the area of the Web page where you want the table to display.<br /><br />Set the value of the parameter to ‘n’ if you want the new look and feel introduced on Apr-12-2003.<br /><br />Set the value of this parameter ‘1’ if you want the CSS styles that render the HTML table with the Quick Base look and feel prior to Apr-11-2003.
jsa | false | false | Set this parameter to true if you want the results returned as a JavaScript array.

### API_GetAncestorInfo

```javascript--node
quickbase.api('API_GetAncestorInfo', {
  dbid: 'bddnn3uz9'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetAncestorInfo', {
  dbid: 'bddnn3uz9'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetAncestorInfo', array(
    'dbid' => 'bddnn3uz9'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetAncestorInfo",
  "errcode": 0,
  "errtext": "No error",
  "ancestorappid": "bbyhxrmsv",
  "oldestancestorappid": "bbyhxrmsv"
}
```

<a href='https://help.quickbase.com/api-guide/getancestorinfo.html' target='_blank'>Quick Base Documentation</a>

This call must be invoked on the app dbid (not on a table dbid) to get ancestor information about the current application. To use this call, you must have at least read permissions on the table.

The first generation copy of an application returns the same DBID for both oldestancestorappid and ancestorappid.  The grandchild of a template  (and subsequent generations) shows the immediate parent app as the ancestorappid and the original template as the oldestancestorappid.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID

### API_GetAppDTMInfo

```javascript--node
quickbase.api('API_GetAppDTMInfo', {
  dbid: 'bddnn3uz9'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetAppDTMInfo', {
  dbid: 'bddnn3uz9'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetAppDTMInfo', array(
    'dbid' => 'bddnn3uz9'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetAppDTMInfo",
  "errcode": 0,
  "errtext": "No error",
  "RequestTime": 1227657049750,
  "RequestNextAllowedTime": 1227657049750,
  "app": {
    "id": "bdzk2ecg5",
    "lastModifiedTime": 1227657049750,
    "lastRecModTime": 1227647748330
  },
  "tables": [
    {
      "id": "bdzk2ecg6",
      "lastModifiedTime": 1227647748440,
      "lastRecModTime": 1227647748330
    },
    ...
  ]
}
```

<a href='https://help.quickbase.com/api-guide/get_app_dtm_info.html' target='_blank'>Quick Base Documentation</a>

Use API_GetAppDTMInfo to get  the timestamp of the last time change throughout the application. You must invoke this call on an application dbid, not on a table dbid.

This is a fast, unobtrusive way to get the time of the last change in an application schema or in records within its tables. No ticket or app token is required for this call, nor does this call result in the application being loaded into memory in Quick Base.

The response to this call contains a parameter indicating the next time you will be allowed to make this call again.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID

### API_GetDBInfo

```javascript--node
quickbase.api('API_GetDBInfo', {
  dbid: 'bddnn3uz9'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetDBInfo', {
  dbid: 'bddnn3uz9'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetDBInfo', array(
    'dbid' => 'bddnn3uz9'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetDBInfo",
  "errcode": 0,
  "errtext": "No error",
  "dbname" => "test",
  "lastRecModTime" => 1205806751959,
  "lastModifiedTime" => 1205877093679,
  "createdTime" => 1204745351407,
  "numRecords" => 3,
  "mgrID" => "112149.bhsv",
  "mgrName" => "AppBoss",
  "version" => "2.0",
  "time_zone" => "(UTC-08:00) Pacific Time (US & Canada)"
}
```

<a href='https://help.quickbase.com/api-guide/get_db_page.html' target='_blank'>Quick Base Documentation</a>

Use API_GetDBInfo to get metadata information, such as the last time the table was modified. For example, you might use this function to find out if the table has changed since you last used it, or to find out if a new record has been added to the table. You can invoke this call on either an application-level dbid or a table-level dbid.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID

### API_GetDBPage

```javascript--node
quickbase.api('API_GetDBPage', {
  dbid: 'bguin9b8e',
  pageID: 3
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetDBPage', {
  dbid: 'bguin9b8e',
  pageID: 3
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetDBPage', array(
    'dbid' => 'bguin9b8e',
    'pageID' => 3
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetDBPage",
  "errcode": 0,
  "errtext": "No error",
  "pagebody": "<html></html>"
}
```

<a href='https://help.quickbase.com/api-guide/get_db_info.html' target='_blank'>Quick Base Documentation</a>

Use API_GetDBPage to retrieve a stored page in Quick Base. Quick Base allows you to store various types of pages, ranging from user-guide pages for your application to Exact Forms, used to automate insertion of data into Word documents using a special Word template from Quick Base.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
pageID | true | | The ID of the page. You can also use the pagename.

### API_GetDBVar

```javascript--node
quickbase.api('API_GetDBVar', {
  dbid: 'bguin9b8e',
  varname: 'usercode'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetDBVar', {
  dbid: 'bguin9b8e',
  varname: 'usercode'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetDBVar', array(
    'dbid' => 'bguin9b8e',
    'varname' => 'usercode'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetDBVar",
  "errcode": 0,
  "errtext": "No error",
  "value": 12
}
```

<a href='https://help.quickbase.com/api-guide/getdbvar.html' target='_blank'>Quick Base Documentation</a>

Use API_GetDBVar to get values assigned to variables (DBVars) set up in your Quick Base application. DBVars are variables you can create to use in your application.

API_GetDBVar returns only one DBVar. If you want to retrieve more than one variable, you'll need to invoke this call multiple times.

Once you've set them up, you can assign values to them using API_SetDBVar. (Use the application-level dbid.) You’ll get an error if the DBVar you ask for does not exist.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
varname | true | | The name of the variable in the target application.


### API_GetFieldProperties

```javascript--node
quickbase.api('API_GetFieldProperties', {
  dbid: 'bddnn3uz9',
  fid: 3
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetFieldProperties', {
  dbid: 'bddnn3uz9',
  fid: 3
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetFieldProperties', array(
    'dbid' => 'bddnn3uz9',
    'fid' => 3
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetFieldProperties",
  "errcode": 0,
  "errtext": "No error",
  "field": {
    "id": 3,
    "field_type": "recordid",
    "base_type": "int32",
    "role": "recordid",
    "mode": "virtual",
    "label": "Record ID#",
    "nowrap": 1,
    "bold": 1,
    "required": 0,
    "appears_by_default": 0,
    "find_enabled": 1,
    "allow_new_choices": 0,
    "sort_as_given": 0,
    "default_value": 10,
    "carrychoices": 1,
    "foreignkey": 0,
    "unique": 1,
    "doesdatacopy": 0,
    "fieldhelp": "",
    "comma_start": 0,
    "does_average": 0,
    "does_total": 0,
    "blank_is_zero": 0
  }
}
```

<a href='https://help.quickbase.com/api-guide/API_GetFieldProperties.html' target='_blank'>Quick Base Documentation</a>

Use API_GetFieldProperties to view the properties of a field. Returns properties specific to the field type.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
fid | true | | The Field ID of the field you wish to retrieve

### API_GetGroupRole

```javascript--node
quickbase.api('API_GetGroupRole', {
  dbid: 'bguin9b8e',
  gid: '345889.klsd'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetGroupRole', {
  dbid: 'bguin9b8e',
  gid: '345889.klsd'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetGroupRole', array(
    'dbid' => 'bguin9b8e',
    'gid' => '345889.klsd'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetGroupRole",
  "errcode": 0,
  "errtext": "No error",
  "roles": [
    {
      "id": 23528,
      "name": "Human Resources"
    },
    ...
  ]
}
```

<a href='https://help.quickbase.com/api-guide/API_GetGroupRole.html' target='_blank'>Quick Base Documentation</a>

Use API_GetGroupRole determine the roleid for a group within an application.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
gid | true | | The id of the group to manage.

### API_GetNumRecords

```javascript--node
quickbase.api('API_GetNumRecords', {
  dbid: 'bddnn3uz9'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetNumRecords', {
  dbid: 'bddnn3uz9'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetNumRecords', array(
    'dbid' => 'bddnn3uz9'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetNumRecords",
  "errcode": 0,
  "errtext": "No error",
  "num_records": 17
}
```

<a href='https://help.quickbase.com/api-guide/getnumrecords.html' target='_blank'>Quick Base Documentation</a>

Use API_GetNumRecords to get the total number of records in the table. Invoke this call on a table-level dbid.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID


### API_GetRecordAsHTML

```javascript--node
quickbase.api('API_GetRecordAsHTML', {
  dbid: 'bguin9b8e',
  rid: 2,
  dfid: 10
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetRecordAsHTML', {
  dbid: 'bguin9b8e',
  rid: 2,
  dfid: 10
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetRecordAsHTML', array(
    'dbid' => 'bguin9b8e',
    'rid' => 2,
    'dfid' => 10
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> Unlike most API calls, the above returns a string of the desired forms HTML rather than an object with properties.

<a href='https://help.quickbase.com/api-guide/getrecordashtml.html' target='_blank'>Quick Base Documentation</a>

Use API_GetRecordAsHTML to get a record within an HTML fragment that can be embedded in another Web page.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
rid <i>or</i> key | true | | The record ID of the record to be edited. You can obtain the recordID of any record in a query.<br /><br />If you use a key field OTHER than the record id (rid), you should use the key parameter rather than rid.
dfid | false | | The dform id of the form used to generate the HTML. The resulting display matches the contents and layout  of the form you specify.<br /><br />You can obtain the dfid of a form by previewing or editing the form; the dfid is part of the URL in the browser’s address bar.

### API_GetRecordInfo

```javascript--node
quickbase.api('API_GetRecordInfo', {
  dbid: 'bguin9b8e',
  rid: 2
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetRecordInfo', {
  dbid: 'bguin9b8e',
  rid: 2
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetRecordInfo', array(
    'dbid' => 'bguin9b8e',
    'rid' => 2
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetRecordInfo",
  "errcode": 0,
  "errtext": "No error",
  "rid": 2,
  "num_fields": 28,
  "update_id": 1205780029699,
  "field": [
    {
      "fid": 26,
      "name": "Parent Page",
      "type": "Numeric",
      "value": 166
    },
    ...
  ]
}
```

<a href='https://help.quickbase.com/api-guide/getrecordinfo.html' target='_blank'>Quick Base Documentation</a>

se API_GetRecordInfo to get the values and types of all the fields in a record. You invoke this call on a table-level dbid.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
rid <i>or</i> key | true | | The record ID of the record to be edited. You can obtain the recordID of any record in a query.<br /><br />If you use a key field OTHER than the record id (rid), you should use the key parameter rather than rid.

### API_GetRoleInfo

```javascript--node
quickbase.api('API_GetRoleInfo', {
  dbid: 'bddnn3uz9'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetRoleInfo', {
  dbid: 'bddnn3uz9'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetRoleInfo', array(
    'dbid' => 'bddnn3uz9'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetRoleInfo",
  "errcode": 0,
  "errtext": "No error",
  "roles": [
    {
      "id": 11,
      "name": "Participant",
      "access": {
        "id": 3,
        "name": "Basic Access"
      }
    },
    ...
  ]
}
```

<a href='https://help.quickbase.com/api-guide/getroleinfo.html' target='_blank'>Quick Base Documentation</a>

Use API_GetRoleInfo to get all of the roles that apply to the application. You invoke this call on the application-level dbid.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID

### API_GetSchema

```javascript--node
quickbase.api('API_GetSchema', {
  dbid: 'bddnn3uz9'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetSchema', {
  dbid: 'bddnn3uz9'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetSchema', array(
    'dbid' => 'bddnn3uz9'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetSchema",
  "errcode": 0,
  "errtext": "No error",
  "time_zone": "(UTC-05:00) Eastern Time (US & Canada)",
  "date_format": "MM-DD-YYYY",
  "table": {
    "name": "Pages",
    "original": {
      table_id: "biy2j7bme",
      app_id: "biy2ikx6n",
      cre_date: 1398827549677,
      mod_date: 1440184904503,
      next_record_id: 172,
      next_field_id: 41,
      next_query_id: 7,
      def_sort_fid: 25,
      "def_sort_order": 1
    },
    "variables": {
      "varName": "varValue",
      ...
    },
    "chdbids": [
      {
        "name": "_dbid_doug_s_api_created_sample",
        "dbid": "bdb5rjd6g"
      },
      ...
    ],
    "queries": [
      {
        "id": 1,
        "qyname": "List All",
        "qytype": "table",
        "qycalst": "0.0",
        ...
      },
      ...
    ],
    "fields": [
      {
        "id": 6,
        "field_type": "text",
        "base_type": "text"
        "label": "Additional Information",
        ...
      },
      ...
    ]
  }
}
```

<a href='https://help.quickbase.com/api-guide/getschema.html' target='_blank'>Quick Base Documentation</a>

Use API_GetSchema to get information about the specified application or application table.

When invoked on an application dbid, this call returns DBVars created for the application and all child table dbids.

When invoked on a table dbid, the call returns DBVars and additional table-related information such as reports, field IDs (fid), key field ID (key_fid), individual record names, base type, and the current property settings for each field. In addition, this call returns the default List All and List Changes reports.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID

### API_GetUserInfo

```javascript--node
quickbase.api('API_GetUserInfo').then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetUserInfo').then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetUserInfo');

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetUserInfo",
  "errcode": 0,
  "errtext": "No error",
  "user": {
    "id": "112149.bhsv",
    "firstName": "Ragnar",
    "lastName": "Lodbrok",
    "login": "Ragnar",
    "email": "Ragnar-Lodbrok@paris.net",
    "screenName": "Ragnar",
    "externalAuth": 0,
    "isVerified": 1
  }
}
```

<a href='https://help.quickbase.com/api-guide/getuserinfo.html' target='_blank'>Quick Base Documentation</a>

Use API_GetUserInfo to get the username and user ID associated with an email address used for Quick Base sign in. You invoke this call on db/main. You can use this call to grant  a user access rights to your application and then invite that user to your application. This call is typically made to return the Quick Base user ID for a user whose email address you know, in preparation for subsequent calls to API_AddUserToRole (grant access rights) and API_SendInvitation, both of which require the user ID.

The user email that you specify must be recognized in Quick Base.

If the anonymous user passes in an email parameter, the email will be passed back in the response.

If you don’t supply an email parameter, the ticket parameter will be used to determine the current user, which means the current user ID, name, and email are returned.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
email | false | current user | Supply the email address (as registered with Quick Base) of the user whose information you want. You can also supply the user’s user name.<br /><br />If you don’t supply this parameter, the call returns the user info of the user to whom the ticket was issued (you).<br /><br />For anonymous users, the email parameter is ignored.

### API_GetUserRole

```javascript--node
quickbase.api('API_GetUserRole', {
  dbid: 'bguin9b8e',
  userid: '112245.efy7',
  inclgrps: 1
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetUserRole', {
  dbid: 'bguin9b8e',
  userid: '112245.efy7',
  inclgrps: 1
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetUserRole', array(
    'dbid' => 'bguin9b8e',
    'userid' => '112245.efy7',
    'inclgrps' => 1
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetUserRole",
  "errcode": 0,
  "errtext": "No error",
  "user": {
    "id": "112245.efy7",
    "name": "John Doe",
    "roles": [
      {
        "id": 11,
        "name": "Participant",
        "access": {
          "id": 3,
          "name": "Basic Access"
        },
        "member": {
          "type": "user",
          "name": "John Doe'
        }
      },
      ...
    ]
  }
}
```

<a href='https://help.quickbase.com/api-guide/getuserrole.html' target='_blank'>Quick Base Documentation</a>

Use API_GetUserRole to see what roles are assigned to a specific user in an application. Invoke this call on an application-level dbid.

Note that, if you do not have sharing permissions on the application, the API call returns your own roles only. To get your roles, you must either invoke the call with no user ID or supply your own user ID.

You  must have Basic Access with Sharing or Full Administration permissions to use this API call to get roles for users other than yourself.  Also, note that, if you want this call to return any roles assigned to a user because he or she is part of a group, you must use the inclgrps parameter (described below). If you do not specify this parameter, API_GetUserRole returns only those roles assigned to the individual user.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
userid | false | current user | The user ID of the user whose current role you want to retrieve. You can get the userid using API_GetUserInfo.<br /><br />If you want to get your own roles, you can use your own userid or omit this parameter.<br /><br />To get the roles of another user, you must supply the user's user id. You must also have Basic Access with Sharing or Full Administration permissions on the application.
inclgrps | false | Set this parameter to true if you want the call to return roles assigned to groups to which the user belongs.<br /><br />The call will return additional information about the role's type--that is whether the role is a user role, a role assigned to a group role, or a role assigned to a domain group.

### API_GetUsersInGroup

```javascript--node
quickbase.api('API_GetUsersInGroup', {
  gid: '2345.skdj',
  includeAllMgrs: false
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GetUsersInGroup', {
  gid: '2345.skdj',
  includeAllMgrs: false
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GetUsersInGroup', array(
    'gid' => '2345.skdj',
    'includeAllMgrs' => false
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GetUsersInGroup",
  "errcode": 0,
  "errtext": "No error",
  "group": {
    "id": "2345.sdfk",
    "name": "GroupInfoTestGroup",
    "description": "My Group description",
    "users": [
      {
        "id": "112149.bhsv",
        "firstName": "john",
        "lastName": "doe",
        "email": "jdoe.qb@gmail.com",
        "screenName": ",
        "isAdmin": "false"
      },
      ...
    ],
    "managers": [
      {
        "id": "52731770.b82h",
        "firstName": "Angela",
        "lastName": "Leon",
        "email": "angela_leon@aleon.com",
        "screenName": "aqleon",
        "isMember": "true"
      },
      ...
    ],
    "subgroups": [
      { "id": "3450.aefs" }
      ...
    ]
  }
}
```

<a href='https://help.quickbase.com/api-guide/API_GetUsersInGroup.html' target='_blank'>Quick Base Documentation</a>

Use API_GetUsersInGroup to get the list of users and groups that make up the members and/or managers of a group.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
gid | true | | The id of the group to list.
includeAllMgrs | false | false | When this is set to true, both members and managers of the group are returned.

### API_GrantedDBs

```javascript--node
quickbase.api('API_GrantedDBs', {
  adminOnly: false,
  excludeparents: false,
  includeancestors: false,
  withembeddedtables: false,
  realmAppsOnly: false
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GrantedDBs', {
  adminOnly: false,
  excludeparents: false,
  includeancestors: false,
  withembeddedtables: false,
  realmAppsOnly: false
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GrantedDBs', array(
    'adminOnly' => false,
    'excludeparents' => false,
    'includeancestors' => false,
    'withembeddedtables' => false,
    'realmAppsOnly' => false
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GrantedDBs",
  "errcode": 0,
  "errtext": "No error",
  "databases": [
    {
      "dbname": "Projects",
      "dbid": "bhgnyxp3v"
    },
    ...
  ]
}
```

<a href='https://help.quickbase.com/api-guide/granteddbs.html' target='_blank'>Quick Base Documentation</a>

Use API_GrantedDBs to get a list of the names and dbids of all the applications and tables that you are entitled to access, across all domains. You invoke this call on https://target_domain/db/main.

This call returns all the apps that you have access to, across all domains, not only the target domain. However, you can use the realmAppsOnly parameter to make this call return only the apps in the realm the call is being made against.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
adminOnly | false | false | Set this paramter to true to return only tables where the user making the request has administration privileges.
excludeparents | false | false | Specifies whether you want application-level dbids returned.
includeancestors | false | false | Set this parameter to true to include ancestor and oldest ancestor information.
withembeddedtables | false | true | Specifies whether you want child table dbids to be returned
realmAppsOnly | false | false | Set this parameter to true to return only the apps in the realm the call is being made against.

### API_GrantedDBsForGroup

```javascript--node
quickbase.api('API_GrantedDBsForGroup', {
  gid: '1217.dgpt'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GrantedDBsForGroup', {
  gid: '1217.dgpt'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GrantedDBsForGroup', array(
    'gid' => '1217.dgpt'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GrantedDBsForGroup",
  "errcode": 0,
  "errtext": "No error",
  "databases": [
    {
      "dbname": "Projects",
      "dbid": "bhgnyxp3v"
    },
    ...
  ]
}
```

<a href='https://help.quickbase.com/api-guide/API_GrantedDBsForGroup.html' target='_blank'>Quick Base Documentation</a>

Use API_GrantedDBsForGroup to get a list of all the applications that a group can access.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
gid | true | | The id of the group to manage.

### API_GrantedGroups

```javascript--node
quickbase.api('API_GrantedGroups', {
  userid: '930245.jlpw',
  adminonly: false
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_GrantedGroups', {
  userid: '930245.jlpw',
  adminonly: false
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_GrantedGroups', array(
    'userid' => '930245.jlpw',
    'adminonly' => false
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_GrantedGroups",
  "errcode": 0,
  "errtext": "No error",
  "groups": [
    {
      "id": "1217.dgpt",
      "name": "GroupInfoTestGroup",
      "description": "Demo Test Group",
      "managedByUser": false
    },
    ...
  ]
}
```

<a href='https://help.quickbase.com/api-guide/API_GrantedGroups.html' target='_blank'>Quick Base Documentation</a>

Use API_GrantedGroups to get the list of groups to which a user has been granted access. If the adminOnly flag is passed, then only return groups in which this user has administration privileges.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
userid | true | | The user id
adminonly | false | false | Only return groups where the user has admin rights.

### API_ImportFromCSV

```javascript--node
quickbase.api('API_ImportFromCSV', {
  dbid: 'bguin9b8e',
  records_csv: [
    '"First Name","Last Name","Company","Phone","Cell Phone","Zip"',
    '"Bruce","Anderson","Reyes Inc","(474) 555-0514","(390) 555-8927",<-80145>',
    '"Judy","Atwell","Conner Supplies","(499) 555-1072","(763) 555-1325",<-50737>',
    '"Kris","Babs,"Willis Orchards","(428) 555-6791","(481) 555-1335",<-81504>',
  ],
  clist: '7.8.6.5.4',
  clist_output: '',
  skipfirst: false,
  msInUTC: true
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_ImportFromCSV', {
  dbid: 'bguin9b8e',
  records_csv: [
    '"First Name","Last Name","Company","Phone","Cell Phone","Zip"',
    '"Bruce","Anderson","Reyes Inc","(474) 555-0514","(390) 555-8927",<-80145>',
    '"Judy","Atwell","Conner Supplies","(499) 555-1072","(763) 555-1325",<-50737>',
    '"Kris","Babs,"Willis Orchards","(428) 555-6791","(481) 555-1335",<-81504>',
  ],
  clist: '7.8.6.5.4',
  clist_output: '',
  skipfirst: false,
  msInUTC: true
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_ImportFromCSV', array(
    'dbid' => 'bguin9b8e',
    'records_csv' => implode("\n", array(
      '"First Name","Last Name","Company","Phone","Cell Phone","Zip"',
      '"Bruce","Anderson","Reyes Inc","(474) 555-0514","(390) 555-8927",<-80145>',
      '"Judy","Atwell","Conner Supplies","(499) 555-1072","(763) 555-1325",<-50737>',
      '"Kris","Babs,"Willis Orchards","(428) 555-6791","(481) 555-1335",<-81504>',
    )),
    'clist' => '7.8.6.5.4',
    'clist_output' => '',
    'skipfirst' => false,
    'msInUTC' => true
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_ImportFromCSV",
  "errcode": 0,
  "errtext": "No error",
  "num_recs_input": 8,
  "num_recs_added": 4,
  "rids": [
    { // Edit Record
      "update_id": 1057961999003,
      "rid": 1
    },
    { // Add Record
      "rid": 2
    },
    ...
  ]
}
```

<a href='https://help.quickbase.com/api-guide/importfromcsv.html' target='_blank'>Quick Base Documentation</a>

Use API_ImportFromCSV to add or update several records. You invoke this call on a table-level dbid. You can add AND update in the same API_ImportFromCSV request. (For an Add, leave the Record ID empty.)

The clist parameter is optional when adding new records to a table. When updating existing records, the clist parameter must contain the field ID for the key field (usually 3 for the Record ID#). The CSV file you're importing must also include a column that contains the value of the key field for each record that will be updated.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
records_csv | true | | An aggregate containing the actual records you are importing.
clist | true | | A period-delimited list of field IDs that indicates how the columns in the CSV file will map to fields in the table when the import happens. To prevent a column in the CSV file from being imported, enter a 0 in the field ID list.<br /><br />This means that the first field ID in the list maps to the first column in the CSV file, the second field ID maps to the second column in the CSV file, and so forth.
clist_output | false | | Specifies which fields should be returned in addition to the record ID and updated ID.
decimalPercent | false | false | Set this parameter to true so that decimal values like 0.50 will be interpreted to mean 50%.
skipfirst | false | false | Set this parameter to true to prevent Quick Base from importing the first row of data in a CSV file. You must specify this parameter if the first row of your CSV file contains column names.
msInUTC | false | global instance setting | Allows you to specify that Quick Base should interpret all date/time stamps passed in as milliseconds using Coordinated Universal Time (UTC) rather than using the local application time.
mergeFieldId | false | | With this parameter, the import uses the field specified as the key, instead of the key field for the table.<ul><li>The merge field must be a unique field, and the specified merge field must contain unique values.</li><li>Values for the table key and/or record ID field will be ignored from input to prevent data corruption.</li><li>If the specified merge field uses a formula, and a record cannot be found by its value, a new record will be added if the resulting formula value is a valid value for the field.</li><li>Record ID or other table key field can be used as the specified merge field.</li><li>The clist parameter is required if this parameter is used.</li></ul>

### API_ProvisionUser

```javascript--node
quickbase.api('API_ProvisionUser', {
  dbid: 'bguin9b8e',
  email: 'sanskor@sbcglobal.com',
  roleid: 11,
  fname: 'Margi',
  lname: 'Rita'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_ProvisionUser', {
  dbid: 'bguin9b8e',
  email: 'sanskor@sbcglobal.com',
  roleid: 11,
  fname: 'Margi',
  lname: 'Rita'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_ProvisionUser', array(
    'dbid' => 'bguin9b8e',
    'email' => 'sanskor@sbcglobal.com',
    'roleid' => 11,
    'fname' => 'Margi',
    'lname' => 'Rita' 
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_ProvisionUser",
  "errcode": 0,
  "errtext": "No error",
  "userid": "112248.5nzg"
}
```

<a href='https://help.quickbase.com/api-guide/provisionuser.html' target='_blank'>Quick Base Documentation</a>

Use API_ProvisionUser to add a user who is not yet registered with Quick Base to your application. You invoke an application-level dbid for a user that is not yet registered with Quick Base, but whose email is known to you. 

After you invoke this call, you’ll need to invoke API_SendInvitation to invite the new user via email. When the user clicks on the email invitation, the user is prompted to complete the brief registration. (At this time, the user can change the first and last name you assigned.)

If a user already is registered with Quick Base, the API will return an error. With registered users, you should use API_GetUserInfo, API_AddUserToRole, and API_SendInvitation.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
email | true | | The email address of the person to whom you are granting access.
roleid | false | none | The role ID of the role you want to assign this user to. You can find this information by invoking API_GetRoleInfo.
fname | true | | The first name of the new Quick Base user.
lname | true | | The last name of the new Quick Base user.

### API_PurgeRecords

```javascript--node
quickbase.api('API_PurgeRecords', {
  dbid: 'bguin9b8e',
  query: ''
  /* qid: 1 */
  /* qname: 'List All' */
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_PurgeRecords', {
  dbid: 'bguin9b8e',
  query: ''
  /* qid: 1 */
  /* qname: 'List All' */
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_PurgeRecords', array(
    'dbid' => 'bguin9b8e',
    'query' => ''
    /* 'qid' => 1 */
    /* 'qname' => 'List All' */
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_PurgeRecords",
  "errcode": 0,
  "errtext": "No error",
  "num_records_deleted": 21
}
```

<a href='https://help.quickbase.com/api-guide/purgerecords.html' target='_blank'>Quick Base Documentation</a>

Use API_PurgeRecords to delete the specified records from the specified table. All records matching the criteria in the specified query will be deleted.

You can build your own query string using the query parameter in the call. You can also use a saved query for the table, using qid or qname. See API_DoQuery for information on saved queries or for instructions on building the query string.

<aside class="warning">
  Caution: Use this call carefully. If you do not supply a query parameter (`query` or `qid` or `qname`), ALL of the table records will be deleted. If you supply an empty query parameter (`query`, or `qid` or `qname`) all of the table records will be deleted as well. If you need to delete only one record, you should use API_DeleteRecord.
</aside>

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
query <i>or</i> qid <i>or</i> qname | false | all | Specifies the query. You can use any of these three options:<br /><br />Use `query` to build your own query string.<br />Use `qid` if you want to use a saved query and want to use its query ID.<br />Use `qname` if you want to use a saved query and refer to it by its query name.

### API_RemoveGroupFromRole

```javascript--node
quickbase.api('API_RemoveGroupFromRole', {
  dbid: 'bguin9b8e',
  gid: '345889.sjkl',
  roleid: 12,
  allRoles: false
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_RemoveGroupFromRole', {
  dbid: 'bguin9b8e',
  gid: '345889.sjkl',
  roleid: 12,
  allRoles: false
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_RemoveGroupFromRole', array(
    'dbid' => 'bguin9b8e',
    'gid' => '345889.sjkl',
    'roleid' => 12,
    'allRoles' => false
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_RemoveGroupFromRole",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/API_RemoveGroupFromRole.html' target='_blank'>Quick Base Documentation</a>

Use API_RemoveGroupFromRole to remove a group from a role in an app. You can also indicate if you want to remove a group from all roles in an application.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
gid | true | | The id of the group to manage.
roleid | true | | The ID of the access role being assigned to the group.
allRoles | false | false | Set to true if the group is to be removed from all roles in the app. 

### API_RemoveSubgroup

```javascript--node
quickbase.api('API_RemoveSubgroup', {
  dbid: 'bguin9b8e',
  gid: '345889.sjkl',
  subgroupid: '345889.skld'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_RemoveSubgroup', {
  dbid: 'bguin9b8e',
  gid: '345889.sjkl',
  subgroupid: '345889.skld'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_RemoveSubgroup', array(
    'dbid' => 'bguin9b8e',
    'gid' => '345889.sjkl',
    'subgroupid' => '345889.skld'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_RemoveSubgroup",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/API_RemoveSubgroup.html' target='_blank'>Quick Base Documentation</a>

Use API_RemoveSubgroup to remove a nested group from a group.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
gid | true | | The id of the containing group.
subgroupid | true | | The id of the subgroup.

### API_RemoveUserFromGroup

```javascript--node
quickbase.api('API_RemoveUserFromGroup', {
  dbid: 'bguin9b8e',
  gid: '345889.sjkl',
  uid: '9380434.rtgf'
  // email: 'bob@smith.com'
  // screenName: 'bob'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_RemoveUserFromGroup', {
  dbid: 'bguin9b8e',
  gid: '345889.sjkl',
  uid: '9380434.rtgf'
  // email: 'bob@smith.com'
  // screenName: 'bob'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_RemoveUserFromGroup', array(
    'dbid' => 'bguin9b8e',
    'gid' => '345889.sjkl',
    'uid' => '9380434.rtgf'
    // 'email' => 'bob@smith.com'
    // 'screenName' => 'bob'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_RemoveUserFromGroup",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/API_RemoveUserFromGroup.html' target='_blank'>Quick Base Documentation</a>

Use API_RemoveUserFromGroup to remove a user from a group.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
gid | true | | The id of the group to manage.
uid | true | | The id of the user to be removed from the group.
email | false | | The email of the Quick Base user
screenName | false | | The screen name of the Quick Base user

### API_RemoveUserFromRole

```javascript--node
quickbase.api('API_RemoveUserFromRole', {
  dbid: 'bguin9b8e',
  userid: '112245.efy7',
  roleid: 11
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_RemoveUserFromRole', {
  dbid: 'bguin9b8e',
  userid: '112245.efy7',
  roleid: 11
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_RemoveUserFromRole', array(
    'dbid' => 'bguin9b8e',
    'userid' => '112245.efy7',
    'roleid' => 11
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_RemoveUserFromRole",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/removeuserfromrole.html' target='_blank'>Quick Base Documentation</a>

Use API_RemoveUserFromRole to remove a user from a specified role. You invoke this call on an application-level dbid. If the user has no other role, this call eliminates the user from the application’s role list. You’ll need to get the user ID by calling API_GetUserInfo if you want to assign the user to another role in the future.

This call can be used to remove the user entirely from any role in the application, effectively turning off access to that user. If you intend to turn off all access, you would need to call API_GetUserRole Info to see what roles the user has, then invoke API_RemoveUserFromRole on each role.

If you expect to add that user to another role in the future, you should consider using API_ChangeUserRole, which can be used to turn off access (with a role set to None) while keeping the user on the application’s role list for future reinstatement or role change.

If you are simply changing the user from one role to another, you should use API_ChangeUserRole.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
userid | true | | The ID of user you want removed from the role.
roleid | true | | The ID of the role from which you want the user removed.

### API_RenameApp

```javascript--node
quickbase.api('API_RenameApp', {
  dbid: 'bguin9b8e',
  newappname: 'Refueler'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_RenameApp', {
  dbid: 'bguin9b8e',
  newappname: 'Refueler'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_RenameApp', array(
    'dbid' => 'bguin9b8e',
    'newappname' => 'Refueler'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_RenameApp",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/renameapp.html' target='_blank'>Quick Base Documentation</a>

Use API_RenameApp to change an application's name. You invoke this call on an application-level dbid. You must have full administration rights on the application to use this call.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
newappname | true | | The name you want to assign to the application

### API_RunImport

```javascript--node
quickbase.api('API_RunImport', {
  dbid: 'bguin9b8e',
  id: 10
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_RunImport', {
  dbid: 'bguin9b8e',
  id: 10
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_RunImport', array(
    'dbid' => 'bguin9b8e',
    'id' => 10
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_RunImport",
  "errcode": 0,
  "errtext": "No error",
  "import_status": "3 new records were created."
}
```

<a href='https://help.quickbase.com/api-guide/runimport.html' target='_blank'>Quick Base Documentation</a>

Quick Base allows you to import data from one or more of your application tables into another application table. You can import tables from within your application, or from another application. (For complete information on this feature, see the Quick Base online help.)

If you'll need to execute the same import multiple times, you can save a specific import and execute it any time you need to run it. To run a saved import, invoke API_RunImport on a table dbid whose ID you specify in this call. Note that you can’t use API_GetSchema to get the saved import's ID because API_GetSchema doesn’t return the saved import.

To access the saved import ID:
<ol>
<li>Open the application into which you want to import data.</li>
<li>On the app Home page, click Import/Export on the Page bar.</li>
<li>Select the Import into a table from another table radio button.</li>
<li>Click Import from Another Table.</li>
<li>Click the name of the saved import you want to use. In the URL shown in the browser you will see this parameter: &id=X. X is the ID you need to supply to this call.</li>
</ol>

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
id | true | | The ID of the saved import that you want to execute.

### API_SendInvitation

```javascript--node
quickbase.api('API_SendInvitation', {
  dbid: 'bguin9b8e',
  userid: '112249.ctdg',
  usertext: 'Welcome!'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_SendInvitation', {
  dbid: 'bguin9b8e',
  userid: '112249.ctdg',
  usertext: 'Welcome!'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_SendInvitation', array(
    'dbid' => 'bguin9b8e',
    'userid' => '112249.ctdg',
    'usertext' => 'Welcome!'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_SendInvitation",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/sendinvitation.html' target='_blank'>Quick Base Documentation</a>

Use API_SendInvitation to send an email invitation to your application. You can send an email invitation to either an existing Quick Base user that you have granted application access to via API_AddUserToRole, or to a new Quick Base user that you have created via API_ProvisionUser.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
userid | true | | The ID of the Quick Base user you are inviting to your application.
usertext | false | | The message you want to display in your email invitation.

### API_SetDBVar

```javascript--node
quickbase.api('API_SetDBVar', {
  dbid: 'bguin9b8e',
  varname: 'usercode',
  value: 14
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_SetDBVar', {
  dbid: 'bguin9b8e',
  varname: 'usercode',
  value: 14
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_SetDBVar', array(
    'dbid' => 'bguin9b8e',
    'varname' => 'usercode',
    'value' => 14
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_SetDBVar",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/setdbvar.html' target='_blank'>Quick Base Documentation</a>

Use API_SetDBVar to create a database variable (DBVar) or set a value for it. If the DBVar already exists, this call overwrites the existing value.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID
varname | true | | The name you want the DBVar to have.
value | true | | The value you want to set in the DBVar

### API_SetFieldProperties

```javascript--node
quickbase.api('API_SetFieldProperties', {
  dbid: 'bguin9b8e',
  fid: 6,
  default_value: 'Hello World!'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_SetFieldProperties', {
  dbid: 'bguin9b8e',
  fid: 6,
  default_value: 'Hello World!'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_SetFieldProperties', array(
    'dbid' => 'bguin9b8e',
    'fid' => 6,
    'default_value' => 'Hello World!'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_SetFieldProperties",
  "errcode": 0,
  "errtext": "No error",
  "fid": 6,
  "name": "Business Phone Number"
}
```

<a href='https://help.quickbase.com/api-guide/setfieldproperties.html' target='_blank'>Quick Base Documentation</a>

Use API_SetFieldProperties to set one or more properties of a field. You invoke this on a table-level dbid.

Typically, you use this call after you create a new field using API_AddField, to set up its default behavior. You can also use this call at any time if you want to change properties, even if the affected field has data.

The properties available for a field vary slightly for the different field types. To get all of the available properties for a field, and to get the field id (fid) needed, use the API_GetSchema call.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
fid | true | | Field ID of the field to be changed
<i>property_name</i> | true | | Name/value pairs for the properties to be set.

### API_SetKeyField

```javascript--node
quickbase.api('API_SetKeyField', {
  dbid: 'bguin9b8e',
  fid: 6
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_SetKeyField', {
  dbid: 'bguin9b8e',
  fid: 6
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_SetKeyField', array(
    'dbid' => 'bguin9b8e',
    'fid' => 6
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_SetKeyField",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/setkeyfield.html' target='_blank'>Quick Base Documentation</a>

Use API_SetKeyField to specify a field in the table as the key field. You invoke this call on a table dbid. You must have full administration rights on the application to use this call.

If you don't specify a key field,  Quick Base uses the built-in Record ID field as the key field. However, if you want to use a different field as the key field for a table, the following conditions must be met:

* The field type you pick must support uniqueness (make sure the Unique checkbox is checked, which disallows duplicate entries).
* If there is data in the table, the field values must all be unique and cannot be blank.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
fid | true | | The field ID of the table field to be used as the key field.

### API_SignOut

```javascript--node
quickbase.api('API_SignOut').then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_SignOut').then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_SignOut');

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_SignOut",
  "errcode": 0,
  "errtext": "No error"
}
```

<a href='https://help.quickbase.com/api-guide/signout.html' target='_blank'>Quick Base Documentation</a>

This call is for use by API client implementations that make use of the ticket cookie rather than the <ticket> parameter.

Invoking this call returns a null ticket cookie (with the name TICKET).  In some cases, invoking API_SignOut results in applications at the local machine (the API client) being unable to access Quick Base applications until API_Authenticate is called for a new ticket cookie.

This call does not invalidate any tickets, nor log off the caller from any Quick Base applications, nor prevent further access of Quick Base applications. If the caller has saved a valid ticket, that caller can continue to use that ticket even after API_SignOut is called.

### API_UploadFile

```javascript--node
quickbase.api('API_UploadFile', {
  dbid: 'bguin9b8e',
  rid: 12,
  fields: [{
    fid: 18,
    filename: 'photo1.jpg',
    value: 'base64'
  }]
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_UploadFile', {
  dbid: 'bguin9b8e',
  rid: 12,
  fields: [{
    fid: 18,
    filename: 'photo1.jpg',
    value: 'base64'
  }]
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_UploadFile', array(
    'dbid' => 'bguin9b8e',
    'rid' => 12,
    'fields' => array(
      array(
        'fid' => 18,
        'filename' => 'photo1.jpg',
        'value' => 'base64'
      )
    )
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_UploadFile",
  "errcode": 0,
  "errtext": "No error",
  "file_fields": [
    "field": [
      {
        "id": 13,
        "url": "https://target_domain/up/bc4gzy4nx/g/rc/ep/va/qchain.log"
      }
    ]
  ]
}
```

<a href='https://help.quickbase.com/api-guide/uploadfile.html' target='_blank'>Quick Base Documentation</a>

Use API_UploadFile to upload base64-encoded file attachments in Quick Base.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
rid | true | | The id of the record that will contain the file attachment
fields | true | | Specify values for file attachment fields using either the fid or name property of the field object. The filename property value should be set to the name of the file with no path specified. Set the base64-encoded text from the encoded file to the value property of the field object<br /><br />Note that you must not use MIME encoding and must not include MIME headers. Many base64 encoders or base64 encoding methods are for MIME type encoding and will not work with Quick Base.<br /><br />You must not insert any new line characters when you base64 encode the file. If your file attachments appear to upload but don’t display in Quick Base, double check for presence of these characters.

### API_UserRoles

```javascript--node
quickbase.api('API_UserRoles', {
  dbid: 'bddnn3uz9'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_UserRoles', {
  dbid: 'bddnn3uz9'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_UserRoles', array(
    'dbid' => 'bddnn3uz9'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_UserRoles",
  "errcode": 0,
  "errtext": "No error",
  "users": [
    {
      "type": "user",
      "id": "112149.bhsv",
      "name": "Jack Danielsson",
      "lastAccess": 1403035235243,
      "lastAccessAppLocal": "06-17-2014 01:00 PM",
      "firstName": "Jack",
      "lastName": "Danielsson",
      "roles": [
        {
          "id": 12,
          "name": "Administrator",
          "access": {
            "id": 1,
            "name": "Administrator"
          }
        }
      ]
    }
  ]
}
```

<a href='https://help.quickbase.com/api-guide/userroles.html' target='_blank'>Quick Base Documentation</a>

Use API_UserRoles to get details about an application’s users and their roles. This call returns all users and their roles.

Note: In order to use the API_UserRoles call, you must have either Basic Access with Sharing access or Full Administration access to the application. If you have only Basic Access with Sharing access, you cannot add a user to a role that has Full Administration permissions.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Application DBID

### API_Webhooks_Activate

```javascript--node
quickbase.api('API_Webhooks_Activate', {
  dbid: 'bddnn3uz9',
  actionIDList: '3,4,5'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_Webhooks_Activate', {
  dbid: 'bddnn3uz9',
  actionIDList: '3,4,5'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_Webhooks_Activate', array(
    'dbid' => 'bddnn3uz9',
    'actionIDList' => '3,4,5'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_Webhooks_Activate",
  "errcode": 0,
  "errtext": "No error",
  "numChanged": 3
}
```

<a href='https://help.quickbase.com/api-guide/API_Webhooks_Activate.html' target='_blank'>Quick Base Documentation</a>

Use API_Webhooks_Activate to make a webhook active.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
actionIDList | true | | Comma separated webhook ID's

### API_Webhooks_Copy

```javascript--node
quickbase.api('API_Webhooks_Copy', {
  dbid: 'bddnn3uz9',
  actionID: 3
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_Webhooks_Copy', {
  dbid: 'bddnn3uz9',
  actionID: 3
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_Webhooks_Copy', array(
    'dbid' => 'bddnn3uz9',
    'actionID' => 3
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_Webhooks_Copy",
  "errcode": 0,
  "errtext": "No error",
  "actionID": 7,
  "success": true
}
```

<a href='https://help.quickbase.com/api-guide/API_Webhooks_Copy.html' target='_blank'>Quick Base Documentation</a>

Use API_Webhooks_Copy to make a duplicate of an existing webhook.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
actionID | true | | Webhook ID that you wish to copy

### API_Webhooks_Create

```javascript--node
quickbase.api('API_Webhooks_Create', {
  dbid: 'bddnn3uz9',
  label: 'Some New Webhook',
  webhookURL: 'https://some.vendor/service'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_Webhooks_Create', {
  dbid: 'bddnn3uz9',
  label: 'Some New Webhook',
  webhookURL: 'https://some.vendor/service'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_Webhooks_Create', array(
    'dbid' => 'bddnn3uz9',
    'label' => 'Some New Webhook',
    'webhookURL' => 'https://some.vendor/service'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_Webhooks_Create",
  "errcode": 0,
  "errtext": "No error",
  "success": true,
  "changed": true
}
```

<a href='https://help.quickbase.com/api-guide/API_Webhooks_Create.html' target='_blank'>Quick Base Documentation</a>

Use API_Webhooks_Create to set up and configure a webhook.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
label | true | | A unique name for the webhook
description | false | | Description of the webhoook
query | false | | Filter criteria to trigger the webhook
workflowWhen | false | a | Condition to trigger the webhook:<ul><li>a = add</li><li>d = delete</li><li>m = modify</li></ul>These can be combined in any order, for example "mda" (modify, delete, add)
webhookURL | true | | Endpoint URL for the webhook. This must begin with: https://<br /><br />Example:<br />https://myApp.quickbase.com/db/xxxxxx
webhookHeader | false | | Key value pair of the header.<br /><br />A name/value pair that typically describes the format of the message, for example: Content-Type: application/json. If the webhook is going to another Quick Base table, you can provide the API call name (either here or in the URL); for example: Quick Base-Action: API_AddRecord.
webhookHeaderCount | false | | The number of webhook headers.<br /><br />For example:<br />WebhookHeaderCount=1
webhookHeaderKey(n) | false | | For example:<br />WebhookHeaderKey1=TOKEN
webhookHeaderValue(n) | false | | Example:<br />WebhookHeaderValue1=VALUE
webhookMessage | false | | Payload of the webhook
webhookMessageFormat | false | XML | Format of the payload:<ul><li>XML</li><li>JSON</li><li>RAW</li></ul>
webhookHTTPVerb | false | POST | A string value that you want returned. It will not be handled by Quick Base but it will be returned in the response.<br /><br />Specifies the HTTP method for the webhook:<ul><li>POST</li><li>GET</li><li>PUT</li><li>PATCH</li><li>DELETE</li></ul>
tfidsWhich | false | | Set the field IDs criteria to determine if webhook should be triggered. The webhook will fire only if at least one of the indicated fields has changed.<br /><br />Set the value of this parameter to TRUE and for every field ID that should be added to criteria add 'tfids' request parameter.<br /><br />Set the value of this parameter to 'tfidsAny' to clear criteria and fire webhook on any changed field.<br /><br />Example: <tfidsWhich>TRUE</tfidsWhich><tfids>6</tfids><tfids>9</tfids>

### API_Webhooks_Delete

```javascript--node
quickbase.api('API_Webhooks_Delete', {
  dbid: 'bddnn3uz9',
  actionIDList: '3,4,5'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_Webhooks_Delete', {
  dbid: 'bddnn3uz9',
  actionIDList: '3,4,5'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_Webhooks_Delete', array(
    'dbid' => 'bddnn3uz9',
    'actionIDList' => '3,4,5'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_Webhooks_Delete",
  "errcode": 0,
  "errtext": "No error",
  "numChanged": 3
}
```

<a href='https://help.quickbase.com/api-guide/API_Webhooks_Delete.html' target='_blank'>Quick Base Documentation</a>

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
actionIDList | true | | Comma-separated IDs of the webhooks

### API_Webhooks_Deactivate

```javascript--node
quickbase.api('API_Webhooks_Deactivate', {
  dbid: 'bddnn3uz9',
  actionIDList: '3,4,5'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_Webhooks_Deactivate', {
  dbid: 'bddnn3uz9',
  actionIDList: '3,4,5'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_Webhooks_Deactivate', array(
    'dbid' => 'bddnn3uz9',
    'actionIDList' => '3,4,5'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_Webhooks_Deactivate",
  "errcode": 0,
  "errtext": "No error",
  "numChanged": 3,
  "success": true
}
```

<a href='https://help.quickbase.com/api-guide/API_Webhooks_Deactivate.html' target='_blank'>Quick Base Documentation</a>

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
actionIDList | true | | Comma-separated IDs of the webhooks

### API_Webhooks_Edit

```javascript--node
quickbase.api('API_Webhooks_Edit', {
  dbid: 'bddnn3uz9',
  actionID: 6,
  label: 'Some Existing Webhook to be Modified',
  webhookURL: 'https://some.vendor/service'
}).then((results) => {
  // Handle results
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
quickbase.api('API_Webhooks_Edit', {
  dbid: 'bddnn3uz9',
  actionID: 6,
  label: 'Some Existing Webhook to be Modified',
  webhookURL: 'https://some.vendor/service'
}).then(function(results){
  // Handle results
}).catch(function(error){
  // Handle error
});
```

```php
<?php

try {
  $results = $quickbase->api('API_Webhooks_Edit', array(
    'dbid' => 'bddnn3uz9',
    'actionID' => 6,
    'label' => 'Some Existing Webhook to be Modified',
    'webhookURL' => 'https://some.vendor/service'
  ));

  // Handle results
}catch(\Exception $error){
  // Handle error
}

?>
```

> The above returns JSON structured like this:

```json
{
  "action": "API_Webhooks_Edit",
  "errcode": 0,
  "errtext": "No error",
  "changed": true,
  "success": true
}
```

<a href='https://help.quickbase.com/api-guide/API_Webhooks_Edit.html' target='_blank'>Quick Base Documentation</a>

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | Table DBID
actionID | true | | The target webhook ID
label | true | | A unique name for the webhook
description | false | | Description of the webhoook
query | false | | Filter criteria to trigger the webhook
workflowWhen | false | a | Condition to trigger the webhook:<ul><li>a = add</li><li>d = delete</li><li>m = modify</li></ul>These can be combined in any order, for example "mda" (modify, delete, add)
webhookURL | true | | Endpoint URL for the webhook. This must begin with: https://<br /><br />Example:<br />https://myApp.quickbase.com/db/xxxxxx
webhookHeader | false | | Key value pair of the header.<br /><br />A name/value pair that typically describes the format of the message, for example: Content-Type: application/json. If the webhook is going to another Quick Base table, you can provide the API call name (either here or in the URL); for example: Quick Base-Action: API_AddRecord.
webhookHeaderCount | false | | The number of webhook headers.<br /><br />For example:<br />WebhookHeaderCount=1
webhookHeaderKey(n) | false | | For example:<br />WebhookHeaderKey1=TOKEN
webhookHeaderValue(n) | false | | Example:<br />WebhookHeaderValue1=VALUE
webhookMessage | false | | Payload of the webhook
webhookMessageFormat | false | XML | Format of the payload:<ul><li>XML</li><li>JSON</li><li>RAW</li></ul>
webhookHTTPVerb | false | POST | A string value that you want returned. It will not be handled by Quick Base but it will be returned in the response.<br /><br />Specifies the HTTP method for the webhook:<ul><li>POST</li><li>GET</li><li>PUT</li><li>PATCH</li><li>DELETE</li></ul>
tfidsWhich | false | | Set the field IDs criteria to determine if webhook should be triggered. The webhook will fire only if at least one of the indicated fields has changed.<br /><br />Set the value of this parameter to TRUE and for every field ID that should be added to criteria add 'tfids' request parameter.<br /><br />Set the value of this parameter to 'tfidsAny' to clear criteria and fire webhook on any changed field.<br /><br />Example: <tfidsWhich>TRUE</tfidsWhich><tfids>6</tfids><tfids>9</tfids>

# QBRecord

This abstraction class represents a singluar Quick Base record. Providing easy to use setters/getters and saving capabilities, this class aims to provide seamless integration between your code and Quick Base at the record level.

This class is utilized in thee abstraction layer `QBTable` and itself utilizies the `QuickBase` class.

## Repository Links

* JavaScript: <a href='https://github.com/tflanagan/node-qb-record' target='_blank'>https://github.com/tflanagan/node-qb-record</a>

## Installation & Loading

```javascript--node
// $ npm install --save qb-record

const QBRecord = require('qb-record');
```

```javascript--browser
// <script type="text/javascript" src="QBRecord.browserify.min.js"></script>
```

Installing the QBRecord library for your desired platform requires either including the browserified version of the library in your HTML page or installing it via a package manager (npm or composer).

Including the library for use in your code depends on your platform.

## Initialization

```javascript--node
const quickbase = new QuickBase({
  realm: realm: 'subdomain/realm',
  userToken: 'user token',
  appToken: 'application token',
  flags: {
    msInUTC: true,
    encoding: 'ISO-8859-1'
  },
  connectionLimit: 10,
  errorOnConnectionLimit: false
});

const record = new QBRecord({
  /*
  quickbase: {
    realm: realm: 'subdomain/realm',
    userToken: 'user token',
    appToken: 'application token',
    flags: {
      msInUTC: true,
      encoding: 'ISO-8859-1'
    },
    connectionLimit: 10,
    errorOnConnectionLimit: false
  },
  */
  quickbase: quickbase,
  dbid: 'bddnn3uz9',
  fids: {
    recordid: 3,
    primaryKey: 3
  },

  // If this is an existing record, then set the record id and primary key accordingly
  recordid: 12,
  primaryKey: 12
});
```

```javascript--browser
var quickbase = new QuickBase({
  realm: realm: 'subdomain/realm',
  userToken: 'user token',
  appToken: 'application token',
  flags: {
    msInUTC: true,
    encoding: 'ISO-8859-1'
  },
  connectionLimit: 10,
  errorOnConnectionLimit: false
});


var record = new QBRecord({
  /*
  quickbase: {
    realm: realm: 'subdomain/realm',
    userToken: 'user token',
    appToken: 'application token',
    flags: {
      msInUTC: true,
      encoding: 'ISO-8859-1'
    },
    connectionLimit: 10,
    errorOnConnectionLimit: false
  },
  */
  quickbase: quickbase,
  dbid: 'bddnn3uz9',
  fids: {
    recordid: 3,
    primaryKey: 3
  },

  // If this is an existing record, then set the record id and primary key accordingly
  recordid: 12,
  primaryKey: 12
});
```

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
quickbase: | true | | You can either pass in an existing `QuickBase` instance (preferred) or create a new `QuickBase` instance by passing in a configuration object
dbid | true | | Table DBID
fids | false | | Object containing name/value pairs of fields and their field ids
recordid | false | | If constructing a pre-existing record, you can define the record id at initialization
primaryKey | false | | If constructing a pre-existing record, you can define the primary key at initialization

## Instance Methods

### `.clear()`

```javascript--node
record.setFid('firstName', 6);
record.set('firstName', 'Bob');

console.log(record.getFid('firstName')); // 6
console.log(record.get('firstName')); // Bob

record.clear();

console.log(record.getFid('firstName')); // 6
console.log(record.get('firstName')); // undefined
```

```javascript--browser
record.setFid('firstName', 6);
record.set('firstName', 'Bob');

console.log(record.getFid('firstName')); // 6
console.log(record.get('firstName')); // Bob

record.clear();

console.log(record.getFid('firstName')); // 6
console.log(record.get('firstName')); // undefined
```

This method clears the QBRecord instance of any trace of the existing record, but preserves defined settings

### `.delete()`

```javascript--node
record.set('recordid', 6);

return record.delete().then(() => {
  // Record 6 deleted
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
record.set('recordid', 6);

record.delete().then(function(){
  // Record 6 deleted
}).catch(function(error){
  // Handle error
});
```

This method deletes the record from QuickBase, then calls `.clear()`.

### `.get(name)`

```javascript--node
record.set('firstName', 'Bob');

const firstName = record.get('firstName');

console.log(firstName); // Bob
```

```javascript--browser
record.set('firstName', 'Bob');

var firstName = record.get('firstName');

console.log(firstName); // Bob
```

This method returns the stored value associated with the `name` argument, defined in the `fids` object in the inialization of the instance or defined with `.setFid()`.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
name | true | | A string presenting a `fids` name/value pairs `name` value

### `.getDBID()`

```javascript--node
record.setDBID('bddnn3uz9');

const dbid = record.getDBID();

console.log(dbid); // bddnn3uz9
```

```javascript--browser
record.setDBID('bddnn3uz9');

var dbid = record.getDBID();

console.log(dbid); // bddnn3uz9
```

This method returns the stored DBID.

### `.getFid(field[, byId])`

```javascript--node
record.setFid('firstName', 6);

const fid = record.getFid('firstName');
const fidName = record.getFid(fid, true);

console.log(fid, fidName); // 6, firstName
```

```javascript--browser
record.setFid('firstName', 6);

var fid = record.getFid('firstName');
var fidName = record.getFid(fid, true);

console.log(fid, fidName); // 6, firstName
```

Returns either the field id or field name depending on `byId`

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
field | true | | The name of the field you wish to get the feild id of
byId | false | false | If set to true then field is assumed to be the field id and returns to field name

### `.getFids()`

```javascript--node
record.setFid('firstName', 6);
record.setFid('lastName', 7);

const fids = record.getFids();

console.log(fids); // { firstName: 6, lastName: 7 }
```

```javascript--browser
record.setFid('firstName', 6);
record.setFid('lastName', 7);

var fids = record.getFids();

console.log(fids); // { firstName: 6, lastName: 7 }
```

Returns the entire `fids` object

### `.getField(id)`

```javascript--node
record.set('recordid', 3);
record.setFid('firstName', 6);

record.load().then(() => {
  const field = record.getField(record.getFid('firstName'));

  console.log(field); // { label: 'First Name', fid: 6, ... }
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
record.setFid('firstName', 6);

record.loadSchema().then(function(){
  const field = record.getField(record.getFid('firstName'));

  console.log(field); // { label: 'First Name', fid: 6, ... }
}).catch(function(error){
  // Handle error
});
```

Returns field schema object

<aside class="notice">
  As this returns Quick Base schema, prior to usage, the instance requires a call to `.load()` or `.loadSchema()`.
</aside>

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
id | true | | Field id of the field you want returned

### `.getFields()`

```javascript--node
record.setFid('firstName', 6);
record.setFid('lastName', 7);

record.loadSchema().then(() => {
  const fields = record.getFields();

  console.log(fields); // [{ label: 'First Name', fid: 6, ... }, { label: 'Last Name', fid: 7, ... }]
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
record.setFid('firstName', 6);
record.setFid('lastName', 7);

record.loadSchema().then(function(){
  const fields = record.getFields();

  console.log(fields); // [{ label: 'First Name', fid: 6, ... }, { label: 'Last Name', fid: 7, ... }]
}).catch(function(error){
  // Handle error
});
```

Returns an array of all loaded field schema objects

<aside class="notice">
  As this returns Quick Base schema, prior to usage, the instance requires a call to `.load()` or `.loadSchema()`.
</aside>

### `.getTableName()`

```javascript--node
record.loadSchema().then(() => {
  const tableName = record.getTableName();

  console.log(tableName); // Customers
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
record.loadSchema().then(function(){
  const tableName = record.getTableName();

  console.log(tableName); // Customers
}).catch(function(error){
  // Handle error
});
```

Returns the name of the Quick Base table.

<aside class="notice">
  As this returns Quick Base schema, prior to usage, the instance requires a call to `.load()` or `.loadSchema()`.
</aside>

### `.load([localQuery[, localClist]])`

```javascript--node
record.set('recordid', 3);

record.load().then(() => {
  console.log(record.toJson()); // { recordid: 3, firstName: ... }
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
record.set('recordid', 3);

record.load().then(function(){
  console.log(record.toJson()); // { recordid: 3, firstName: ... }
}).catch(function(error){
  // Handle error
});
```

Loads the defined record from Quick Base, executing a structured DoQuery to retrieve and populate internal schema and data structures

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
localQuery | false | | A string or object<br /><br />If a string is passed in, it is treated as a query string. If an object is passed in, subsequent arguments will be ignored, assuming they've been passed in via this object.
localClist | false | | A period delimited string of field ids or an array of field ids

### `.loadSchema()`

```javascript--node
record.loadSchema().then(() => {
  console.log(record.getFields());
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
record.loadSchema().then(function(){
  console.log(record.getFields());
}).catch(function(error){
  // Handle error
});
```

Executes an API_GetSchema and stores the returned results internally.

### `.save([fidsToSave])`

```javascript--node
record.set('firstName', 'Bob');
record.set('lastName', 'Smith');

record.save().then(() => {
  console.log(record.get('recordid')); // 6
}).catch((error) => {
  // Handle error
});

// Explicity saving a list of fields
record.set('firstName', 'Bob');
record.set('lastName', 'Smith');
record.set('age', 24);

record.save([
  'firstName',
  'lastName'
]).then(() => {
  console.log(record.get('recordid')); // 6
}).catch((error) => {
  // Handle error
});
```

```javascript--browser
record.set('firstName', 'Bob');
record.set('lastName', 'Smith');

]).then(function(){
  console.log(record.get('recordid')); // 6
}).catch(function(error){
  // Handle error
});

// Explicity saving a list of fields
record.set('firstName', 'Bob');
record.set('lastName', 'Smith');
record.set('age', 24);

record.save([
  'firstName',
  'lastName'
]).then(function(){
  console.log(record.get('recordid')); // 6
}).catch(function(error){
  // Handle error
});
```

This method executes either an API_AddRecord or an API_EditRecord depending on
the set Record ID. If a Record ID is stored, then it executes an API_EditRecord
otherwise, an API_AddRecord.

If `fidsToSave` is defined, then only configured fids in this array will be
saved.

If this executes an API_AddRecord, the newly assigned Record ID is
automatically stored internally. If the defined primaryKey FID is also a
defined field in the `fids` object, then this is also automatically stored
internally.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
fidsToSave | false | | An array of inclusive fields to save, if omitted, all defined fields will be saved

### `.set(field, value)`

```javascript--node
record.set('firstName', 'Bob');

console.log(record.get('firstName')); // Bob
```

```javascript--browser
record.set('firstName', 'Bob');

console.log(record.get('firstName')); // Bob
```

This method sets the passed in value associated with the `name` argument,
defined in the `fids` object in the inialization of the instance.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
field | true | | Field name to set the value of
value | true | | Value of the field to set

### `.setDBID(dbid)`

```javascript--node
record.setDBID('bddnn3uz9');

const dbid = record.getDBID();

console.log(dbid); // bddnn3uz9
```

```javascript--browser
record.setDBID('bddnn3uz9');

const dbid = record.getDBID();

console.log(dbid); // bddnn3uz9
```

Sets the `dbid` setting.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
dbid | true | | DBID to set

### `.setFid(name, id)`

```javascript--node
record.setFid('firstName', 6);

console.log(record.getFid('firstName')); // 6
```

```javascript--browser
record.setFid('firstName', 6);

console.log(record.getFid('firstName')); // 6
```

Adds/Updates configured field with the name of `name` and the field id of `id`.

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
name | true | | Name of the field configuration you're defining
id | true | | Field id of the field configuration you're defining

### `.setFids(fields)`

```javascript--node
record.setFids([{
  name: 'firstName',
  fid: 6
}, {
  name: 'lastName',
  fid: 7
});

console.log(record.getFids()); // { firstName: 6, lastName: 7 }
```

```javascript--browser
record.setFids([{
  name: 'firstName',
  fid: 6
}, {
  name: 'lastName',
  fid: 7
});

console.log(record.getFids()); // { firstName: 6, lastName: 7 }
```

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
fields | true | | An array of objects containing a `name` and `fid` attribute that will mapped over and passed to `.setFid()`

### `.toJson([fidsToConvert])`

```javascript--node
project.set('projectName', 'Some Example Project');
project.set('completed', false);
project.set('finishDate', moment(1587355200000));
project.set('elapsedTime', moment.duration(10800000));
project.set('$tableRow', $('.some-tr-row'));

task.set('taskName', 'Some Task');

project.set('tasks', [
  task
]);

project.toJson();
```

```javascript--browser
project.set('projectName', 'Some Example Project');
project.set('completed', false);
project.set('finishDate', moment(1587355200000));
project.set('elapsedTime', moment.duration(10800000));
project.set('$tableRow', $('.some-tr-row'));

task.set('taskName', 'Some Task');

project.set('tasks', [
  task
]);

project.toJson();
```

> The above returns JSON structured like this:

```json
{
  "projectName": "Some Example Project",
  "completed": false,
  "finishDate": "2020-04-20T04:00:00.000Z",
  "elapsedTime": 10800000,
  "$tableRow": "[DOM Object]",
  "tasks": [{
    taskName: 'Some Task'
  }]
}
```

Returns the record in JSON format.

<aside class="notice">
  This is a recursive function, looping through all values stored internally. If an object is detect, it will loop through its' properties.
  <ul>
    <li>This function converts DOM objects to the string `[DOM Object]`</li>
    <li>This function converts Date and Moment objects to ISO strings</li>
    <li>This function converts other QBRecord classes to JSON objects</li>
    <li>This function converts Moment Duration objects to milliseconds</li>
  </ul>
</aside>

Parameter | Required | Default | Description
--------- | -------- | ------- | -----------
fidsToConvert | false | | An array of field names to convert into the resulting JSON object

# QBTable

## Initialization

## Instance Methods

### clear

### deleteRecord

### deleteRecords

### getAppID

### getDateFormat

### getDBID

### getChildTables

### getFid

### getFids

### getField

### getFields

### getNRecords

### getOptions

### getPlural

### getQueries

### getQuery

### getRecord

### getRecords

### getSingular

### getSList

### getTableName

### getTimezone

### getVariable

### getVariables

### load

### loadNRecords

### loadSchema

### save

### setDBID

### setFid

### setFids

### setOptions

### setQuery

### setSList

### toJson

### upsertRecord

### upsertRecords

## Static Methods

### NewRecord

### NewRecords

# Formatting Data for Quick Base

Quick Base has very specific patterns and formats for various field types that you will need to pay attention to.

Below is a table of Quick Base field types and their acceptable values.

UI: Field Type | Acceptable Values
---------------|------------------
Text | Any characters, special characters, numbers, or symbols. Note that non-alphanumeric characters (anything other than A-Z, a-z, and 0-9) may need to be encoded to appear as intended in your data.
Text - Multi-line | Any characters, special characters, numbers, or symbols. Note that non-alphanumeric characters (anything other than A-Z, a-z, and 0-9) may need to be encoded to appear as intended in your data.
Text - Multiple Choice | A valid choice that has been set up for the multiple choice field. Note that Quick Base does not validate case here; if you enter "ford" and, in your application, the choice is "Ford," the choice will be accepted.<br /><br />If you enter an invalid choice, Quick Base generates an error.
Multi-select Text | Up to 20 valid choices from the list set up for the field, separated by semi-colons. The set of choices provided must not contain duplicates.<br /><br />Note: Choices added to a multi-select text field are limited to 60 characters, and the total number of choices in the field may not exceed 100.
Numeric | Positive or negative numbers. Quick Base ignores any non-numeric characters you enter here, but will not generate an error.<br /><br />If you've specified decimal places using API_SetFieldProperties, the value will be truncated  or lengthened accordingly.
Numeric - Currency | Positive and negative numbers, with or without decimals. The decimal character should match the decimal character set in the field's properties.
Numeric - Percent | A number that represents the percentage. Note that, if you want to indicate 80%, you should enter 80 in this field.
Numeric - Rating | A numeric rating, from 1 - 5. Quick Base displays ratings as stars; if you enter 3 in a Numeric-Rating field, Quick Base displays 3 out of 5 stars selected.
Date | A date in the format specified in the app's properties.<br /><br />Alternatively, a date in milliseconds since January 1, 1970 00:00:00 UTC.  Note that the Quick Base HTTP API returns dates in this format, which is the same internal representation used by JavaScript.
Date/Time | A date and time. Dates should be in the format specified in the app's properties.<br /><br />This field is an extended date field that can also contain the time, in the format HH:MM AM/PM. If you don't specify AM or PM, Quick Base defaults to AM. If you don't specify a time, Quick Base defaults to 12:00 AM.
Time of Day | A time in this format: HH:MM AM/PM.<br /><br />If you do not specify AM or PM, Quick Base defaults to AM.
Duration | A number that indicates a period of time. Note that you must use API_SetFieldProperties to set the unit of measure.<br /><br />If you enter a non-numeric value here, Quick Base ignores the value (no error is generated.)
Checkbox | A string that indicates whether the checkbox is checked or not.<br /><br />To specify that a checkbox is checked, enter any of these values:<ul><li>1</li><li>yes</li><li>true</li><li>on</li></ul>To specify that a checkbox is not checked, enter any string other than those listed above, or leave the parameter blank. If a Checkbox field is required, and does not default to "checked," you must enter some value to be able to save the record.
Phone Number | A phone number, with or without an extension. Enter a 10-digit string of numbers. You are not required to enter special characters (parentheses or dashes).<br /><br />Example: For this phone number: (123) 456-7890<br /><br />...enter  1234567890<br /><br />If you want to include an extension, you can enter x after the last digit of the phone number, followed by the numeric characters that make up the extension. There is no minimum or maximum character limit on extensions.<br /><br />Example: For this phone number:(123) 456-7890 x9876<br /><br />...enter  1234567890x9876<br /><br />Quick Base ignores any non-numeric character you enter here (except for the x used for extensions).
Email Address | An email address (joeuser@example.com).<br /><br />Note that if you enter an invalid email address, Quick Base does not generate an error.
User | A Quick Base user's email address or Quick Base user name.
List-User | Quick Base users' email addresses, Quick Base user names, or hashed user IDs, separated by semi-colons.<br /><br />Example: joe@example.com;sue@example.com
File Attachment | A base64-encoded file.<br /><br />Note that you must not use MIME encoding and must not include MIME headers. Note that many base64 encoders or base64 encoding methods are for MIME type encoding and will not work with Quick Base.
URL | A Web address. If you don't enter "http://", Quick Base adds it for you.<br /><br />Note that if you enter an invalid Web address, Quick Base does not generate an error.
Report Link | Report links are derived from other fields. You can update which report is linked to by updating the field that the report link refers to. You can't write to this type of field directly. If your API writes to a Report Link field, Quick Base ignores the call.
iCalendar | iCalendar fields are derived from other fields. You can update this type of field only by updating the fields to which it refers. You can't write to this type of field directly. If your API writes to an iCalendar field, Quick Base returns an error.
vCard | vCard fields are derived from other fields. You can update this type of field only by updating the fields to which it refers.  You can't write to this type of field directly If your API writes to a vCard field, Quick Base returns an error.
Predecessor | The Record ID of the predecessor record. Note that if you enter an invalid Record ID here, Quick Base returns an error.
Formula | Formula fields are derived from other fields. You cannot write to this type of field directly. If your API writes to a formula field, Quick Base returns an error.
